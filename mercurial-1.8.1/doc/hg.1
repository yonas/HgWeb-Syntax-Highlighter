.\" Man page generated from reStructeredText.
.
.TH HG 1 "" "" "Mercurial Manual"
.SH NAME
hg \- Mercurial source code management system
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBhg\fP \fIcommand\fP [\fIoption\fP]... [\fIargument\fP]...
.SH DESCRIPTION
.sp
The \fBhg\fP command provides a command line interface to the Mercurial
system.
.SH COMMAND ELEMENTS
.INDENT 0.0
.TP
.B files...
.
indicates one or more filename or relative path filenames; see
\%File Name Patterns\: for information on pattern matching
.TP
.B path
.
indicates a path on the local machine
.TP
.B revision
.
indicates a changeset which can be specified as a changeset
revision number, a tag, or a unique substring of the changeset
hash value
.TP
.B repository path
.
either the pathname of a local repository or the URI of a remote
repository.
.UNINDENT
.SH OPTIONS
.INDENT 0.0
.TP
.B \-R,  \-\-repository
.
repository root directory or name of overlay bundle file
.TP
.B \-\-cwd
.
change working directory
.TP
.B \-y,  \-\-noninteractive
.
do not prompt, assume \(aqyes\(aq for any required answers
.TP
.B \-q,  \-\-quiet
.
suppress output
.TP
.B \-v,  \-\-verbose
.
enable additional output
.TP
.B \-\-config
.
set/override config option (use \(aqsection.name=value\(aq)
.TP
.B \-\-debug
.
enable debugging output
.TP
.B \-\-debugger
.
start debugger
.TP
.B \-\-encoding
.
set the charset encoding (default: ascii)
.TP
.B \-\-encodingmode
.
set the charset encoding mode (default: strict)
.TP
.B \-\-traceback
.
always print a traceback on exception
.TP
.B \-\-time
.
time how long the command takes
.TP
.B \-\-profile
.
print command execution profile
.TP
.B \-\-version
.
output version information and exit
.TP
.B \-h,  \-\-help
.
display help and exit
.UNINDENT
.SH COMMANDS
.SS add
.sp
.nf
.ft C
hg add [OPTION]... [FILE]...
.ft P
.fi
.sp
Schedule files to be version controlled and added to the
repository.
.sp
The files will be added to the repository at the next commit. To
undo an add before that, see \%\fBhg forget\fP\:.
.sp
If no names are given, add all files to the repository.
.sp
An example showing how new (unknown) files are added
automatically by \%\fBhg add\fP\::
.sp
.nf
.ft C
$ ls
foo.c
$ hg status
? foo.c
$ hg add
adding foo.c
$ hg status
A foo.c
.ft P
.fi
.sp
Returns 0 if all files are successfully added.
.sp
Options:
.INDENT 0.0
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.SS addremove
.sp
.nf
.ft C
hg addremove [OPTION]... [FILE]...
.ft P
.fi
.sp
Add all new files and remove all missing files from the
repository.
.sp
New files are ignored if they match any of the patterns in
\fB.hgignore\fP. As with add, these changes take effect at the next
commit.
.sp
Use the \-s/\-\-similarity option to detect renamed files. With a
parameter greater than 0, this compares every removed file with
every added file and records those similar enough as renames. This
option takes a percentage between 0 (disabled) and 100 (files must
be identical) as its parameter. Detecting renamed files this way
can be expensive. After using this option, \%\fBhg status \-C\fP\: can be
used to check which files were identified as moved or renamed.
.sp
Returns 0 if all files are successfully added.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-similarity
.
guess renamed files by similarity (0<=s<=100)
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.SS annotate
.sp
.nf
.ft C
hg annotate [\-r REV] [\-f] [\-a] [\-u] [\-d] [\-n] [\-c] [\-l] FILE...
.ft P
.fi
.sp
List changes in files, showing the revision id responsible for
each line
.sp
This command is useful for discovering when a change was made and
by whom.
.sp
Without the \-a/\-\-text option, annotate will avoid processing files
it detects as binary. With \-a, annotate will annotate the file
anyway, although the results will probably be neither useful
nor desirable.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
annotate the specified revision
.TP
.B \-\-follow
.
follow copies/renames and list the filename (DEPRECATED)
.TP
.B \-\-no\-follow
.
don\(aqt follow copies and renames
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-u,  \-\-user
.
list the author (long with \-v)
.TP
.B \-f,  \-\-file
.
list the filename
.TP
.B \-d,  \-\-date
.
list the date (short with \-q)
.TP
.B \-n,  \-\-number
.
list the revision number (default)
.TP
.B \-c,  \-\-changeset
.
list the changeset
.TP
.B \-l,  \-\-line\-number
.
show line number at the first appearance
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.sp
aliases: blame
.UNINDENT
.SS archive
.sp
.nf
.ft C
hg archive [OPTION]... DEST
.ft P
.fi
.sp
By default, the revision used is the parent of the working
directory; use \-r/\-\-rev to specify a different revision.
.sp
The archive type is automatically detected based on file
extension (or override using \-t/\-\-type).
.sp
Valid types are:
.INDENT 0.0
.TP
.B \fBfiles\fP
.sp
a directory full of files (default)
.TP
.B \fBtar\fP
.sp
tar archive, uncompressed
.TP
.B \fBtbz2\fP
.sp
tar archive, compressed using bzip2
.TP
.B \fBtgz\fP
.sp
tar archive, compressed using gzip
.TP
.B \fBuzip\fP
.sp
zip archive, uncompressed
.TP
.B \fBzip\fP
.sp
zip archive, compressed using deflate
.UNINDENT
.sp
The exact name of the destination archive or directory is given
using a format string; see \%\fBhg help export\fP\: for details.
.sp
Each member added to an archive file has a directory prefix
prepended. Use \-p/\-\-prefix to specify a format string for the
prefix. The default is the basename of the archive, with suffixes
removed.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-no\-decode
.
do not pass files through decoders
.TP
.B \-p,  \-\-prefix
.
directory prefix for files in archive
.TP
.B \-r,  \-\-rev
.
revision to distribute
.TP
.B \-t,  \-\-type
.
type of distribution to create
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS backout
.sp
.nf
.ft C
hg backout [OPTION]... [\-r] REV
.ft P
.fi
.sp
Prepare a new changeset with the effect of REV undone in the
current working directory.
.sp
If REV is the parent of the working directory, then this new changeset
is committed automatically. Otherwise, hg needs to merge the
changes and the merged result is left uncommitted.
.sp
By default, the pending changeset will have one parent,
maintaining a linear history. With \-\-merge, the pending changeset
will instead have two parents: the old parent of the working
directory and a new child of REV that simply undoes REV.
.sp
Before version 1.7, the behavior without \-\-merge was equivalent to
specifying \-\-merge followed by \%\fBhg update \-\-clean .\fP\: to cancel
the merge and leave the child of REV as a head to be merged
separately.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-merge
.
merge with old dirstate parent after backout
.TP
.B \-\-parent
.
parent to choose when backing out merge
.TP
.B \-t,  \-\-tool
.
specify merge tool
.TP
.B \-r,  \-\-rev
.
revision to backout
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.UNINDENT
.SS bisect
.sp
.nf
.ft C
hg bisect [\-gbsr] [\-U] [\-c CMD] [REV]
.ft P
.fi
.sp
This command helps to find changesets which introduce problems. To
use, mark the earliest changeset you know exhibits the problem as
bad, then mark the latest changeset which is free from the problem
as good. Bisect will update your working directory to a revision
for testing (unless the \-U/\-\-noupdate option is specified). Once
you have performed tests, mark the working directory as good or
bad, and bisect will either update to another candidate changeset
or announce that it has found the bad revision.
.sp
As a shortcut, you can also use the revision argument to mark a
revision as good or bad without checking it out first.
.sp
If you supply a command, it will be used for automatic bisection.
Its exit status will be used to mark revisions as good or bad:
status 0 means good, 125 means to skip the revision, 127
(command not found) will abort the bisection, and any other
non\-zero exit status means the revision is bad.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-reset
.
reset bisect state
.TP
.B \-g,  \-\-good
.
mark changeset good
.TP
.B \-b,  \-\-bad
.
mark changeset bad
.TP
.B \-s,  \-\-skip
.
skip testing changeset
.TP
.B \-c,  \-\-command
.
use command to check changeset state
.TP
.B \-U,  \-\-noupdate
.
do not update to target
.UNINDENT
.SS bookmarks
.sp
.nf
.ft C
hg bookmarks [\-f] [\-d] [\-m NAME] [\-r REV] [NAME]
.ft P
.fi
.sp
Bookmarks are pointers to certain commits that move when
committing. Bookmarks are local. They can be renamed, copied and
deleted. It is possible to use bookmark names in \%\fBhg merge\fP\: and
\%\fBhg update\fP\: to merge and update respectively to a given bookmark.
.sp
You can use \%\fBhg bookmark NAME\fP\: to set a bookmark on the working
directory\(aqs parent revision with the given name. If you specify
a revision using \-r REV (where REV may be an existing bookmark),
the bookmark is assigned to that revision.
.sp
Bookmarks can be pushed and pulled between repositories (see \%\fBhg help
push\fP\: and \%\fBhg help pull\fP\:). This requires both the local and remote
repositories to support bookmarks. For versions prior to 1.8, this means
the bookmarks extension must be enabled.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force
.TP
.B \-r,  \-\-rev
.
revision
.TP
.B \-d,  \-\-delete
.
delete a given bookmark
.TP
.B \-m,  \-\-rename
.
rename a given bookmark
.UNINDENT
.SS branch
.sp
.nf
.ft C
hg branch [\-fC] [NAME]
.ft P
.fi
.sp
With no argument, show the current branch name. With one argument,
set the working directory branch name (the branch will not exist
in the repository until the next commit). Standard practice
recommends that primary development take place on the \(aqdefault\(aq
branch.
.sp
Unless \-f/\-\-force is specified, branch will not let you set a
branch name that already exists, even if it\(aqs inactive.
.sp
Use \-C/\-\-clean to reset the working directory branch to that of
the parent of the working directory, negating a previous branch
change.
.sp
Use the command \%\fBhg update\fP\: to switch to an existing branch. Use
\%\fBhg commit \-\-close\-branch\fP\: to mark this branch as closed.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
set branch name even if it shadows an existing branch
.TP
.B \-C,  \-\-clean
.
reset branch name to parent branch name
.UNINDENT
.SS branches
.sp
.nf
.ft C
hg branches [\-ac]
.ft P
.fi
.sp
List the repository\(aqs named branches, indicating which ones are
inactive. If \-c/\-\-closed is specified, also list branches which have
been marked closed (see \%\fBhg commit \-\-close\-branch\fP\:).
.sp
If \-a/\-\-active is specified, only show active branches. A branch
is considered active if it contains repository heads.
.sp
Use the command \%\fBhg update\fP\: to switch to an existing branch.
.sp
Returns 0.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-active
.
show only branches that have unmerged heads
.TP
.B \-c,  \-\-closed
.
show normal and closed branches
.UNINDENT
.SS bundle
.sp
.nf
.ft C
hg bundle [\-f] [\-t TYPE] [\-a] [\-r REV]... [\-\-base REV]... FILE [DEST]
.ft P
.fi
.sp
Generate a compressed changegroup file collecting changesets not
known to be in another repository.
.sp
If you omit the destination repository, then hg assumes the
destination will have all the nodes you specify with \-\-base
parameters. To create a bundle containing all changesets, use
\-a/\-\-all (or \-\-base null).
.sp
You can change compression method with the \-t/\-\-type option.
The available compression methods are: none, bzip2, and
gzip (by default, bundles are compressed using bzip2).
.sp
The bundle file can then be transferred using conventional means
and applied to another repository with the unbundle or pull
command. This is useful when direct push and pull are not
available or when exporting an entire repository is undesirable.
.sp
Applying bundles preserves all changeset contents including
permissions, copy/rename information, and revision history.
.sp
Returns 0 on success, 1 if no changes found.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
run even when the destination is unrelated
.TP
.B \-r,  \-\-rev
.
a changeset intended to be added to the destination
.TP
.B \-b,  \-\-branch
.
a specific branch you would like to bundle
.TP
.B \-\-base
.
a base changeset assumed to be available at the destination
.TP
.B \-a,  \-\-all
.
bundle all changesets in the repository
.TP
.B \-t,  \-\-type
.
bundle compression type to use (default: bzip2)
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS cat
.sp
.nf
.ft C
hg cat [OPTION]... FILE...
.ft P
.fi
.sp
Print the specified files as they were at the given revision. If
no revision is given, the parent of the working directory is used,
or tip if no revision is checked out.
.sp
Output may be to a file, in which case the name of the file is
given using a format string. The formatting rules are the same as
for the export command, with the following additions:
.INDENT 0.0
.TP
.B \fB%s\fP
.sp
basename of file being printed
.TP
.B \fB%d\fP
.sp
dirname of file being printed, or \(aq.\(aq if in repository root
.TP
.B \fB%p\fP
.sp
root\-relative path name of file being printed
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-o,  \-\-output
.
print output to file with formatted name
.TP
.B \-r,  \-\-rev
.
print the given revision
.TP
.B \-\-decode
.
apply any matching decode filter
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS clone
.sp
.nf
.ft C
hg clone [OPTION]... SOURCE [DEST]
.ft P
.fi
.sp
Create a copy of an existing repository in a new directory.
.sp
If no destination directory name is specified, it defaults to the
basename of the source.
.sp
The location of the source is added to the new repository\(aqs
\fB.hg/hgrc\fP file, as the default to be used for future pulls.
.sp
See \%\fBhg help urls\fP\: for valid source format details.
.sp
It is possible to specify an \fBssh://\fP URL as the destination, but no
\fB.hg/hgrc\fP and working directory will be created on the remote side.
Please see \%\fBhg help urls\fP\: for important details about \fBssh://\fP URLs.
.sp
A set of changesets (tags, or branch names) to pull may be specified
by listing each changeset (tag, or branch name) with \-r/\-\-rev.
If \-r/\-\-rev is used, the cloned repository will contain only a subset
of the changesets of the source repository. Only the set of changesets
defined by all \-r/\-\-rev options (including all their ancestors)
will be pulled into the destination repository.
No subsequent changesets (including subsequent tags) will be present
in the destination.
.sp
Using \-r/\-\-rev (or \(aqclone src#rev dest\(aq) implies \-\-pull, even for
local source repositories.
.sp
For efficiency, hardlinks are used for cloning whenever the source
and destination are on the same filesystem (note this applies only
to the repository data, not to the working directory). Some
filesystems, such as AFS, implement hardlinking incorrectly, but
do not report errors. In these cases, use the \-\-pull option to
avoid hardlinking.
.sp
In some cases, you can clone repositories and the working directory
using full hardlinks with
.sp
.nf
.ft C
$ cp \-al REPO REPOCLONE
.ft P
.fi
.sp
This is the fastest way to clone, but it is not always safe. The
operation is not atomic (making sure REPO is not modified during
the operation is up to you) and you have to make sure your editor
breaks hardlinks (Emacs and most Linux Kernel tools do so). Also,
this is not compatible with certain extensions that place their
metadata under the .hg directory, such as mq.
.sp
Mercurial will update the working directory to the first applicable
revision from this list:
.INDENT 0.0
.IP a. 3
.
null if \-U or the source repository has no changesets
.IP b. 3
.
if \-u . and the source repository is local, the first parent of
the source repository\(aqs working directory
.IP c. 3
.
the changeset specified with \-u (if a branch name, this means the
latest head of that branch)
.IP d. 3
.
the changeset specified with \-r
.IP e. 3
.
the tipmost head specified with \-b
.IP f. 3
.
the tipmost head specified with the url#branch source syntax
.IP g. 3
.
the tipmost head of the default branch
.IP h. 3
.
tip
.UNINDENT
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-U,  \-\-noupdate
.
the clone will include an empty working copy (only a repository)
.TP
.B \-u,  \-\-updaterev
.
revision, tag or branch to check out
.TP
.B \-r,  \-\-rev
.
include the specified changeset
.TP
.B \-b,  \-\-branch
.
clone only the specified branch
.TP
.B \-\-pull
.
use pull protocol to copy metadata
.TP
.B \-\-uncompressed
.
use uncompressed transfer (fast over LAN)
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS commit
.sp
.nf
.ft C
hg commit [OPTION]... [FILE]...
.ft P
.fi
.sp
Commit changes to the given files into the repository. Unlike a
centralized SCM, this operation is a local operation. See
\%\fBhg push\fP\: for a way to actively distribute your changes.
.sp
If a list of files is omitted, all changes reported by \%\fBhg status\fP\:
will be committed.
.sp
If you are committing the result of a merge, do not provide any
filenames or \-I/\-X filters.
.sp
If no commit message is specified, Mercurial starts your
configured editor where you can enter a message. In case your
commit fails, you will find a backup of your message in
\fB.hg/last\-message.txt\fP.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success, 1 if nothing changed.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-\-close\-branch
.
mark a branch as closed, hiding it from the branch list
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.sp
aliases: ci
.UNINDENT
.SS copy
.sp
.nf
.ft C
hg copy [OPTION]... [SOURCE]... DEST
.ft P
.fi
.sp
Mark dest as having copies of source files. If dest is a
directory, copies are put in that directory. If dest is a file,
the source must be a single file.
.sp
By default, this command copies the contents of files as they
exist in the working directory. If invoked with \-A/\-\-after, the
operation is recorded, but no copying is performed.
.sp
This command takes effect with the next commit. To undo a copy
before that, see \%\fBhg revert\fP\:.
.sp
Returns 0 on success, 1 if errors are encountered.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-after
.
record a copy that has already occurred
.TP
.B \-f,  \-\-force
.
forcibly copy over an existing managed file
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.sp
aliases: cp
.UNINDENT
.SS diff
.sp
.nf
.ft C
hg diff [OPTION]... ([\-c REV] | [\-r REV1 [\-r REV2]]) [FILE]...
.ft P
.fi
.sp
Show differences between revisions for the specified files.
.sp
Differences between files are shown using the unified diff format.
.IP Note
.
diff may generate unexpected results for merges, as it will
default to comparing against the working directory\(aqs first
parent changeset if no revisions are specified.
.RE
.sp
When two revision arguments are given, then changes are shown
between those revisions. If only one revision is specified then
that revision is compared to the working directory, and, when no
revisions are specified, the working directory files are compared
to its parent.
.sp
Alternatively you can specify \-c/\-\-change with a revision to see
the changes in that changeset relative to its first parent.
.sp
Without the \-a/\-\-text option, diff will avoid generating diffs of
files it detects as binary. With \-a, diff will generate a diff
anyway, probably with undesirable results.
.sp
Use the \-g/\-\-git option to generate diffs in the git extended diff
format. For more information, read \%\fBhg help diffs\fP\:.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
revision
.TP
.B \-c,  \-\-change
.
change made by revision
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-nodates
.
omit dates from diff headers
.TP
.B \-p,  \-\-show\-function
.
show which function each change is in
.TP
.B \-\-reverse
.
produce a diff that undoes the changes
.TP
.B \-w,  \-\-ignore\-all\-space
.
ignore white space when comparing lines
.TP
.B \-b,  \-\-ignore\-space\-change
.
ignore changes in the amount of white space
.TP
.B \-B,  \-\-ignore\-blank\-lines
.
ignore changes whose lines are all blank
.TP
.B \-U,  \-\-unified
.
number of lines of context to show
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.UNINDENT
.SS export
.sp
.nf
.ft C
hg export [OPTION]... [\-o OUTFILESPEC] REV...
.ft P
.fi
.sp
Print the changeset header and diffs for one or more revisions.
.sp
The information shown in the changeset header is: author, date,
branch name (if non\-default), changeset hash, parent(s) and commit
comment.
.IP Note
.
export may generate unexpected diff output for merge
changesets, as it will compare the merge changeset against its
first parent only.
.RE
.sp
Output may be to a file, in which case the name of the file is
given using a format string. The formatting rules are as follows:
.INDENT 0.0
.TP
.B \fB%%\fP
.sp
literal "%" character
.TP
.B \fB%H\fP
.sp
changeset hash (40 hexadecimal digits)
.TP
.B \fB%N\fP
.sp
number of patches being generated
.TP
.B \fB%R\fP
.sp
changeset revision number
.TP
.B \fB%b\fP
.sp
basename of the exporting repository
.TP
.B \fB%h\fP
.sp
short\-form changeset hash (12 hexadecimal digits)
.TP
.B \fB%n\fP
.sp
zero\-padded sequence number, starting at 1
.TP
.B \fB%r\fP
.sp
zero\-padded changeset revision number
.UNINDENT
.sp
Without the \-a/\-\-text option, export will avoid generating diffs
of files it detects as binary. With \-a, export will generate a
diff anyway, probably with undesirable results.
.sp
Use the \-g/\-\-git option to generate diffs in the git extended diff
format. See \%\fBhg help diffs\fP\: for more information.
.sp
With the \-\-switch\-parent option, the diff will be against the
second parent. It can be useful to review a merge.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-o,  \-\-output
.
print output to file with formatted name
.TP
.B \-\-switch\-parent
.
diff against the second parent
.TP
.B \-r,  \-\-rev
.
revisions to export
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-nodates
.
omit dates from diff headers
.UNINDENT
.SS forget
.sp
.nf
.ft C
hg forget [OPTION]... FILE...
.ft P
.fi
.sp
Mark the specified files so they will no longer be tracked
after the next commit.
.sp
This only removes files from the current branch, not from the
entire project history, and it does not delete them from the
working directory.
.sp
To undo a forget before the next commit, see \%\fBhg add\fP\:.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS grep
.sp
.nf
.ft C
hg grep [OPTION]... PATTERN [FILE]...
.ft P
.fi
.sp
Search revisions of files for a regular expression.
.sp
This command behaves differently than Unix grep. It only accepts
Python/Perl regexps. It searches repository history, not the
working directory. It always prints the revision number in which a
match appears.
.sp
By default, grep only prints output for the first revision of a
file in which it finds a match. To get it to print every revision
that contains a change in match status ("\-" for a match that
becomes a non\-match, or "+" for a non\-match that becomes a match),
use the \-\-all flag.
.sp
Returns 0 if a match is found, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-0,  \-\-print0
.
end fields with NUL
.TP
.B \-\-all
.
print all revisions that match
.TP
.B \-f,  \-\-follow
.
follow changeset history, or file history across copies and renames
.TP
.B \-i,  \-\-ignore\-case
.
ignore case when matching
.TP
.B \-l,  \-\-files\-with\-matches
.
print only filenames and revisions that match
.TP
.B \-n,  \-\-line\-number
.
print matching line numbers
.TP
.B \-r,  \-\-rev
.
only search files changed within revision range
.TP
.B \-u,  \-\-user
.
list the author (long with \-v)
.TP
.B \-d,  \-\-date
.
list the date (short with \-q)
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS heads
.sp
.nf
.ft C
hg heads [\-ac] [\-r STARTREV] [REV]...
.ft P
.fi
.sp
With no arguments, show all repository branch heads.
.sp
Repository "heads" are changesets with no child changesets. They are
where development generally takes place and are the usual targets
for update and merge operations. Branch heads are changesets that have
no child changeset on the same branch.
.sp
If one or more REVs are given, only branch heads on the branches
associated with the specified changesets are shown.
.sp
If \-c/\-\-closed is specified, also show branch heads marked closed
(see \%\fBhg commit \-\-close\-branch\fP\:).
.sp
If STARTREV is specified, only those heads that are descendants of
STARTREV will be displayed.
.sp
If \-t/\-\-topo is specified, named branch mechanics will be ignored and only
changesets without children will be shown.
.sp
Returns 0 if matching heads are found, 1 if not.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
show only heads which are descendants of STARTREV
.TP
.B \-t,  \-\-topo
.
show topological heads only
.TP
.B \-a,  \-\-active
.
show active branchheads only (DEPRECATED)
.TP
.B \-c,  \-\-closed
.
show normal and closed branch heads
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.UNINDENT
.SS help
.sp
.nf
.ft C
hg help [TOPIC]
.ft P
.fi
.sp
With no arguments, print a list of commands with short help messages.
.sp
Given a topic, extension, or command name, print help for that
topic.
.sp
Returns 0 if successful.
.SS identify
.sp
.nf
.ft C
hg identify [\-nibtB] [\-r REV] [SOURCE]
.ft P
.fi
.sp
With no revision, print a summary of the current state of the
repository.
.sp
Specifying a path to a repository root or Mercurial bundle will
cause lookup to operate on that repository/bundle.
.sp
This summary identifies the repository state using one or two
parent hash identifiers, followed by a "+" if there are
uncommitted changes in the working directory, a list of tags for
this revision and a branch name for non\-default branches.
.sp
Returns 0 if successful.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
identify the specified revision
.TP
.B \-n,  \-\-num
.
show local revision number
.TP
.B \-i,  \-\-id
.
show global revision id
.TP
.B \-b,  \-\-branch
.
show branch
.TP
.B \-t,  \-\-tags
.
show tags
.TP
.B \-B,  \-\-bookmarks
.
show bookmarks
.sp
aliases: id
.UNINDENT
.SS import
.sp
.nf
.ft C
hg import [OPTION]... PATCH...
.ft P
.fi
.sp
Import a list of patches and commit them individually (unless
\-\-no\-commit is specified).
.sp
If there are outstanding changes in the working directory, import
will abort unless given the \-f/\-\-force flag.
.sp
You can import a patch straight from a mail message. Even patches
as attachments work (to use the body part, it must have type
text/plain or text/x\-patch). From and Subject headers of email
message are used as default committer and commit message. All
text/plain body parts before first diff are added to commit
message.
.sp
If the imported patch was generated by \%\fBhg export\fP\:, user and
description from patch override values from message headers and
body. Values given on command line with \-m/\-\-message and \-u/\-\-user
override these.
.sp
If \-\-exact is specified, import will set the working directory to
the parent of each patch before applying it, and will abort if the
resulting changeset has a different ID than the one recorded in
the patch. This may happen due to character set problems or other
deficiencies in the text patch format.
.sp
With \-s/\-\-similarity, hg will attempt to discover renames and
copies in the patch in the same way as \(aqaddremove\(aq.
.sp
To read a patch from standard input, use "\-" as the patch name. If
a URL is specified, the patch will be downloaded from it.
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-p,  \-\-strip
.
directory strip option for patch. This has the same meaning as the corresponding patch option (default: 1)
.TP
.B \-b,  \-\-base
.
base path
.TP
.B \-f,  \-\-force
.
skip check for outstanding uncommitted changes
.TP
.B \-\-no\-commit
.
don\(aqt commit, just update the working directory
.TP
.B \-\-exact
.
apply patch to the nodes from which it was generated
.TP
.B \-\-import\-branch
.
use any branch information in patch (implied by \-\-exact)
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.TP
.B \-s,  \-\-similarity
.
guess renamed files by similarity (0<=s<=100)
.sp
aliases: patch
.UNINDENT
.SS incoming
.sp
.nf
.ft C
hg incoming [\-p] [\-n] [\-M] [\-f] [\-r REV]... [\-\-bundle FILENAME] [SOURCE]
.ft P
.fi
.sp
Show new changesets found in the specified path/URL or the default
pull location. These are the changesets that would have been pulled
if a pull at the time you issued this command.
.sp
For remote repository, using \-\-bundle avoids downloading the
changesets twice if the incoming is followed by a pull.
.sp
See pull for valid source format details.
.sp
Returns 0 if there are incoming changes, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
run even if remote repository is unrelated
.TP
.B \-n,  \-\-newest\-first
.
show newest record first
.TP
.B \-\-bundle
.
file to store the bundles into
.TP
.B \-r,  \-\-rev
.
a remote changeset intended to be added
.TP
.B \-B,  \-\-bookmarks
.
compare bookmarks
.TP
.B \-b,  \-\-branch
.
a specific branch you would like to pull
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-l,  \-\-limit
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.sp
aliases: in
.UNINDENT
.SS init
.sp
.nf
.ft C
hg init [\-e CMD] [\-\-remotecmd CMD] [DEST]
.ft P
.fi
.sp
Initialize a new repository in the given directory. If the given
directory does not exist, it will be created.
.sp
If no directory is given, the current directory is used.
.sp
It is possible to specify an \fBssh://\fP URL as the destination.
See \%\fBhg help urls\fP\: for more information.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS locate
.sp
.nf
.ft C
hg locate [OPTION]... [PATTERN]...
.ft P
.fi
.sp
Print files under Mercurial control in the working directory whose
names match the given patterns.
.sp
By default, this command searches all directories in the working
directory. To search just the current directory and its
subdirectories, use "\-\-include .".
.sp
If no patterns are given to match, this command prints the names
of all files under Mercurial control in the working directory.
.sp
If you want to feed the output of this command into the "xargs"
command, use the \-0 option to both this command and "xargs". This
will avoid the problem of "xargs" treating single filenames that
contain whitespace as multiple filenames.
.sp
Returns 0 if a match is found, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
search the repository as it is in REV
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs
.TP
.B \-f,  \-\-fullpath
.
print complete paths from the filesystem root
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS log
.sp
.nf
.ft C
hg log [OPTION]... [FILE]
.ft P
.fi
.sp
Print the revision history of the specified files or the entire
project.
.sp
File history is shown without following rename or copy history of
files. Use \-f/\-\-follow with a filename to follow history across
renames and copies. \-\-follow without a filename will only show
ancestors or descendants of the starting revision. \-\-follow\-first
only follows the first parent of merge revisions.
.sp
If no revision range is specified, the default is \fBtip:0\fP unless
\-\-follow is set, in which case the working directory parent is
used as the starting revision. You can specify a revision set for
log, see \%\fBhg help revsets\fP\: for more information.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
By default this command prints revision number and changeset id,
tags, non\-trivial parents, user, date and time, and a summary for
each commit. When the \-v/\-\-verbose switch is used, the list of
changed files and full commit message are shown.
.IP Note
.
log \-p/\-\-patch may generate unexpected diff output for merge
changesets, as it will only compare the merge changeset against
its first parent. Also, only files different from BOTH parents
will appear in files:.
.RE
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-follow
.
follow changeset history, or file history across copies and renames
.TP
.B \-\-follow\-first
.
only follow the first parent of merge changesets
.TP
.B \-d,  \-\-date
.
show revisions matching date spec
.TP
.B \-C,  \-\-copies
.
show copied files
.TP
.B \-k,  \-\-keyword
.
do case\-insensitive search for a given text
.TP
.B \-r,  \-\-rev
.
show the specified revision or range
.TP
.B \-\-removed
.
include revisions where files were removed
.TP
.B \-m,  \-\-only\-merges
.
show only merges
.TP
.B \-u,  \-\-user
.
revisions committed by user
.TP
.B \-\-only\-branch
.
show only changesets within the given named branch (DEPRECATED)
.TP
.B \-b,  \-\-branch
.
show changesets within the given named branch
.TP
.B \-P,  \-\-prune
.
do not display revision or any of its ancestors
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-l,  \-\-limit
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.sp
aliases: history
.UNINDENT
.SS manifest
.sp
.nf
.ft C
hg manifest [\-r REV]
.ft P
.fi
.sp
Print a list of version controlled files for the given revision.
If no revision is given, the first parent of the working directory
is used, or the null revision if no revision is checked out.
.sp
With \-v, print file permissions, symlink and executable bits.
With \-\-debug, print file revision hashes.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
revision to display
.UNINDENT
.SS merge
.sp
.nf
.ft C
hg merge [\-P] [\-f] [[\-r] REV]
.ft P
.fi
.sp
The current working directory is updated with all changes made in
the requested revision since the last common predecessor revision.
.sp
Files that changed between either parent are marked as changed for
the next commit and a commit must be performed before any further
updates to the repository are allowed. The next commit will have
two parents.
.sp
\fB\-\-tool\fP can be used to specify the merge tool used for file
merges. It overrides the HGMERGE environment variable and your
configuration files.
.sp
If no revision is specified, the working directory\(aqs parent is a
head revision, and the current branch contains exactly one other
head, the other head is merged with by default. Otherwise, an
explicit revision with which to merge with must be provided.
.sp
\%\fBhg resolve\fP\: must be used to resolve unresolved files.
.sp
To undo an uncommitted merge, use \%\fBhg update \-\-clean .\fP\: which
will check out a clean copy of the original merge parent, losing
all changes.
.sp
Returns 0 on success, 1 if there are unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force a merge with outstanding changes
.TP
.B \-t,  \-\-tool
.
specify merge tool
.TP
.B \-r,  \-\-rev
.
revision to merge
.TP
.B \-P,  \-\-preview
.
review revisions to merge (no merge is performed)
.UNINDENT
.SS outgoing
.sp
.nf
.ft C
hg outgoing [\-M] [\-p] [\-n] [\-f] [\-r REV]... [DEST]
.ft P
.fi
.sp
Show changesets not found in the specified destination repository
or the default push location. These are the changesets that would
be pushed if a push was requested.
.sp
See pull for details of valid destination formats.
.sp
Returns 0 if there are outgoing changes, 1 otherwise.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
run even when the destination is unrelated
.TP
.B \-r,  \-\-rev
.
a changeset intended to be included in the destination
.TP
.B \-n,  \-\-newest\-first
.
show newest record first
.TP
.B \-B,  \-\-bookmarks
.
compare bookmarks
.TP
.B \-b,  \-\-branch
.
a specific branch you would like to push
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-l,  \-\-limit
.
limit number of changes displayed
.TP
.B \-M,  \-\-no\-merges
.
do not show merges
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.sp
aliases: out
.UNINDENT
.SS parents
.sp
.nf
.ft C
hg parents [\-r REV] [FILE]
.ft P
.fi
.sp
Print the working directory\(aqs parent revisions. If a revision is
given via \-r/\-\-rev, the parent of that revision will be printed.
If a file argument is given, the revision in which the file was
last changed (before the working directory revision or the
argument to \-\-rev if given) is printed.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
show parents of the specified revision
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.UNINDENT
.SS paths
.sp
.nf
.ft C
hg paths [NAME]
.ft P
.fi
.sp
Show definition of symbolic path name NAME. If no name is given,
show definition of all available names.
.sp
Path names are defined in the [paths] section of your
configuration file and in \fB/etc/mercurial/hgrc\fP. If run inside a
repository, \fB.hg/hgrc\fP is used, too.
.sp
The path names \fBdefault\fP and \fBdefault\-push\fP have a special
meaning.  When performing a push or pull operation, they are used
as fallbacks if no location is specified on the command\-line.
When \fBdefault\-push\fP is set, it will be used for push and
\fBdefault\fP will be used for pull; otherwise \fBdefault\fP is used
as the fallback for both.  When cloning a repository, the clone
source is written as \fBdefault\fP in \fB.hg/hgrc\fP.  Note that
\fBdefault\fP and \fBdefault\-push\fP apply to all inbound (e.g.
\%\fBhg incoming\fP\:) and outbound (e.g. \%\fBhg outgoing\fP\:, \%\fBhg email\fP\: and
\%\fBhg bundle\fP\:) operations.
.sp
See \%\fBhg help urls\fP\: for more information.
.sp
Returns 0 on success.
.SS pull
.sp
.nf
.ft C
hg pull [\-u] [\-f] [\-r REV]... [\-e CMD] [\-\-remotecmd CMD] [SOURCE]
.ft P
.fi
.sp
Pull changes from a remote repository to a local one.
.sp
This finds all changes from the repository at the specified path
or URL and adds them to a local repository (the current one unless
\-R is specified). By default, this does not update the copy of the
project in the working directory.
.sp
Use \%\fBhg incoming\fP\: if you want to see what would have been added
by a pull at the time you issued this command. If you then decide
to add those changes to the repository, you should use \%\fBhg pull
\-r X\fP\: where \fBX\fP is the last changeset listed by \%\fBhg incoming\fP\:.
.sp
If SOURCE is omitted, the \(aqdefault\(aq path will be used.
See \%\fBhg help urls\fP\: for more information.
.sp
Returns 0 on success, 1 if an update had unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-u,  \-\-update
.
update to new branch head if changesets were pulled
.TP
.B \-f,  \-\-force
.
run even when remote repository is unrelated
.TP
.B \-r,  \-\-rev
.
a remote changeset intended to be added
.TP
.B \-B,  \-\-bookmark
.
bookmark to pull
.TP
.B \-b,  \-\-branch
.
a specific branch you would like to pull
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS push
.sp
.nf
.ft C
hg push [\-f] [\-r REV]... [\-e CMD] [\-\-remotecmd CMD] [DEST]
.ft P
.fi
.sp
Push changesets from the local repository to the specified
destination.
.sp
This operation is symmetrical to pull: it is identical to a pull
in the destination repository from the current one.
.sp
By default, push will not allow creation of new heads at the
destination, since multiple heads would make it unclear which head
to use. In this situation, it is recommended to pull and merge
before pushing.
.sp
Use \-\-new\-branch if you want to allow push to create a new named
branch that is not present at the destination. This allows you to
only create a new branch without forcing other changes.
.sp
Use \-f/\-\-force to override the default behavior and push all
changesets on all branches.
.sp
If \-r/\-\-rev is used, the specified revision and all its ancestors
will be pushed to the remote repository.
.sp
Please see \%\fBhg help urls\fP\: for important details about \fBssh://\fP
URLs. If DESTINATION is omitted, a default path will be used.
.sp
Returns 0 if push was successful, 1 if nothing to push.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force push
.TP
.B \-r,  \-\-rev
.
a changeset intended to be included in the destination
.TP
.B \-B,  \-\-bookmark
.
bookmark to push
.TP
.B \-b,  \-\-branch
.
a specific branch you would like to push
.TP
.B \-\-new\-branch
.
allow pushing a new branch
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS recover
.sp
.nf
.ft C
hg recover
.ft P
.fi
.sp
Recover from an interrupted commit or pull.
.sp
This command tries to fix the repository status after an
interrupted operation. It should only be necessary when Mercurial
suggests it.
.sp
Returns 0 if successful, 1 if nothing to recover or verify fails.
.SS remove
.sp
.nf
.ft C
hg remove [OPTION]... FILE...
.ft P
.fi
.sp
Schedule the indicated files for removal from the repository.
.sp
This only removes files from the current branch, not from the
entire project history. \-A/\-\-after can be used to remove only
files that have already been deleted, \-f/\-\-force can be used to
force deletion, and \-Af can be used to remove files from the next
revision without deleting them from the working directory.
.sp
The following table details the behavior of remove for different
file states (columns) and option combinations (rows). The file
states are Added [A], Clean [C], Modified [M] and Missing [!] (as
reported by \%\fBhg status\fP\:). The actions are Warn, Remove (from
branch) and Delete (from disk):
.sp
.nf
.ft C
       A  C  M  !
none   W  RD W  R
\-f     R  RD RD R
\-A     W  W  W  R
\-Af    R  R  R  R
.ft P
.fi
.sp
This command schedules the files to be removed at the next commit.
To undo a remove before that, see \%\fBhg revert\fP\:.
.sp
Returns 0 on success, 1 if any warnings encountered.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-after
.
record delete for missing files
.TP
.B \-f,  \-\-force
.
remove (and delete) file even if added or modified
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.sp
aliases: rm
.UNINDENT
.SS rename
.sp
.nf
.ft C
hg rename [OPTION]... SOURCE... DEST
.ft P
.fi
.sp
Mark dest as copies of sources; mark sources for deletion. If dest
is a directory, copies are put in that directory. If dest is a
file, there can only be one source.
.sp
By default, this command copies the contents of files as they
exist in the working directory. If invoked with \-A/\-\-after, the
operation is recorded, but no copying is performed.
.sp
This command takes effect at the next commit. To undo a rename
before that, see \%\fBhg revert\fP\:.
.sp
Returns 0 on success, 1 if errors are encountered.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-after
.
record a rename that has already occurred
.TP
.B \-f,  \-\-force
.
forcibly copy over an existing managed file
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.sp
aliases: move mv
.UNINDENT
.SS resolve
.sp
.nf
.ft C
hg resolve [OPTION]... [FILE]...
.ft P
.fi
.sp
Merges with unresolved conflicts are often the result of
non\-interactive merging using the \fBinternal:merge\fP configuration
setting, or a command\-line merge tool like \fBdiff3\fP. The resolve
command is used to manage the files involved in a merge, after
\%\fBhg merge\fP\: has been run, and before \%\fBhg commit\fP\: is run (i.e. the
working directory must have two parents).
.sp
The resolve command can be used in the following ways:
.INDENT 0.0
.IP \(bu 2
.
\%\fBhg resolve [\-\-tool TOOL] FILE...\fP\:: attempt to re\-merge the specified
files, discarding any previous merge attempts. Re\-merging is not
performed for files already marked as resolved. Use \fB\-\-all/\-a\fP
to selects all unresolved files. \fB\-\-tool\fP can be used to specify
the merge tool used for the given files. It overrides the HGMERGE
environment variable and your configuration files.
.IP \(bu 2
.
\%\fBhg resolve \-m [FILE]\fP\:: mark a file as having been resolved
(e.g. after having manually fixed\-up the files). The default is
to mark all unresolved files.
.IP \(bu 2
.
\%\fBhg resolve \-u [FILE]...\fP\:: mark a file as unresolved. The
default is to mark all resolved files.
.IP \(bu 2
.
\%\fBhg resolve \-l\fP\:: list files which had or still have conflicts.
In the printed list, \fBU\fP = unresolved and \fBR\fP = resolved.
.UNINDENT
.sp
Note that Mercurial will not let you commit files with unresolved
merge conflicts. You must use \%\fBhg resolve \-m ...\fP\: before you can
commit after a conflicting merge.
.sp
Returns 0 on success, 1 if any files fail a resolve attempt.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-all
.
select all unresolved files
.TP
.B \-l,  \-\-list
.
list state of files needing merge
.TP
.B \-m,  \-\-mark
.
mark files as resolved
.TP
.B \-u,  \-\-unmark
.
mark files as unresolved
.TP
.B \-t,  \-\-tool
.
specify merge tool
.TP
.B \-n,  \-\-no\-status
.
hide status prefix
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS revert
.sp
.nf
.ft C
hg revert [OPTION]... [\-r REV] [NAME]...
.ft P
.fi
.IP Note
.
This command is most likely not what you are looking for.
Revert will partially overwrite content in the working
directory without changing the working directory parents. Use
\%\fBhg update \-r rev\fP\: to check out earlier revisions, or
\%\fBhg update \-\-clean .\fP\: to undo a merge which has added another
parent.
.RE
.sp
With no revision specified, revert the named files or directories
to the contents they had in the parent of the working directory.
This restores the contents of the affected files to an unmodified
state and unschedules adds, removes, copies, and renames. If the
working directory has two parents, you must explicitly specify a
revision.
.sp
Using the \-r/\-\-rev option, revert the given files or directories
to their contents as of a specific revision. This can be helpful
to "roll back" some or all of an earlier change. See \%\fBhg help
dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Revert modifies the working directory. It does not commit any
changes, or change the parent of the working directory. If you
revert to a revision other than the parent of the working
directory, the reverted files will thus appear modified
afterwards.
.sp
If a file has been deleted, it is restored. If the executable mode
of a file was changed, it is reset.
.sp
If names are given, all files matching the names are reverted.
If no arguments are given, no files are reverted.
.sp
Modified files are saved with a .orig suffix before reverting.
To disable these backups, use \-\-no\-backup.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-all
.
revert all changes when no arguments given
.TP
.B \-d,  \-\-date
.
tipmost revision matching date
.TP
.B \-r,  \-\-rev
.
revert to the specified revision
.TP
.B \-\-no\-backup
.
do not save backup copies of files
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.SS rollback
.sp
.nf
.ft C
hg rollback
.ft P
.fi
.sp
This command should be used with care. There is only one level of
rollback, and there is no way to undo a rollback. It will also
restore the dirstate at the time of the last transaction, losing
any dirstate changes since that time. This command does not alter
the working directory.
.sp
Transactions are used to encapsulate the effects of all commands
that create new changesets or propagate existing changesets into a
repository. For example, the following commands are transactional,
and their effects can be rolled back:
.INDENT 0.0
.IP \(bu 2
.
commit
.IP \(bu 2
.
import
.IP \(bu 2
.
pull
.IP \(bu 2
.
push (with this repository as the destination)
.IP \(bu 2
.
unbundle
.UNINDENT
.sp
This command is not intended for use on public repositories. Once
changes are visible for pull by other users, rolling a transaction
back locally is ineffective (someone else may already have pulled
the changes). Furthermore, a race is possible with readers of the
repository; for example an in\-progress pull from the repository
may fail if a rollback is performed.
.sp
Returns 0 on success, 1 if no rollback data is available.
.sp
Options:
.INDENT 0.0
.TP
.B \-n,  \-\-dry\-run
.
do not perform actions, just print output
.UNINDENT
.SS root
.sp
.nf
.ft C
hg root
.ft P
.fi
.sp
Print the root directory of the current repository.
.sp
Returns 0 on success.
.SS serve
.sp
.nf
.ft C
hg serve [OPTION]...
.ft P
.fi
.sp
Start a local HTTP repository browser and pull server. You can use
this for ad\-hoc sharing and browsing of repositories. It is
recommended to use a real web server to serve a repository for
longer periods of time.
.sp
Please note that the server does not implement access control.
This means that, by default, anybody can read from the server and
nobody can write to it by default. Set the \fBweb.allow_push\fP
option to \fB*\fP to allow everybody to push to the server. You
should use a real web server if you need to authenticate users.
.sp
By default, the server logs accesses to stdout and errors to
stderr. Use the \-A/\-\-accesslog and \-E/\-\-errorlog options to log to
files.
.sp
To have the server choose a free port number to listen on, specify
a port number of 0; in this case, the server will print the port
number it uses.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-accesslog
.
name of access log file to write to
.TP
.B \-d,  \-\-daemon
.
run server in background
.TP
.B \-\-daemon\-pipefds
.
used internally by daemon mode
.TP
.B \-E,  \-\-errorlog
.
name of error log file to write to
.TP
.B \-p,  \-\-port
.
port to listen on (default: 8000)
.TP
.B \-a,  \-\-address
.
address to listen on (default: all interfaces)
.TP
.B \-\-prefix
.
prefix path to serve from (default: server root)
.TP
.B \-n,  \-\-name
.
name to show in web pages (default: working directory)
.TP
.B \-\-web\-conf
.
name of the hgweb config file (see "hg help hgweb")
.TP
.B \-\-webdir\-conf
.
name of the hgweb config file (DEPRECATED)
.TP
.B \-\-pid\-file
.
name of file to write process ID to
.TP
.B \-\-stdio
.
for remote clients
.TP
.B \-t,  \-\-templates
.
web templates to use
.TP
.B \-\-style
.
template style to use
.TP
.B \-6,  \-\-ipv6
.
use IPv6 in addition to IPv4
.TP
.B \-\-certificate
.
SSL certificate file
.UNINDENT
.SS showconfig
.sp
.nf
.ft C
hg showconfig [\-u] [NAME]...
.ft P
.fi
.sp
With no arguments, print names and values of all config items.
.sp
With one argument of the form section.name, print just the value
of that config item.
.sp
With multiple arguments, print names and values of all config
items with matching section names.
.sp
With \-\-debug, the source (filename and line number) is printed
for each config item.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-u,  \-\-untrusted
.
show untrusted configuration options
.sp
aliases: debugconfig
.UNINDENT
.SS status
.sp
.nf
.ft C
hg status [OPTION]... [FILE]...
.ft P
.fi
.sp
Show status of files in the repository. If names are given, only
files that match are shown. Files that are clean or ignored or
the source of a copy/move operation, are not listed unless
\-c/\-\-clean, \-i/\-\-ignored, \-C/\-\-copies or \-A/\-\-all are given.
Unless options described with "show only ..." are given, the
options \-mardu are used.
.sp
Option \-q/\-\-quiet hides untracked (unknown and ignored) files
unless explicitly requested with \-u/\-\-unknown or \-i/\-\-ignored.
.IP Note
.
status may appear to disagree with diff if permissions have
changed or a merge has occurred. The standard diff format does
not report permission changes and diff only reports changes
relative to one merge parent.
.RE
.sp
If one revision is given, it is used as the base revision.
If two revisions are given, the differences between them are
shown. The \-\-change option can also be used as a shortcut to list
the changed files of a revision from its first parent.
.sp
The codes used to show the status of files are:
.sp
.nf
.ft C
M = modified
A = added
R = removed
C = clean
! = missing (deleted by non\-hg command, but still tracked)
? = not tracked
I = ignored
  = origin of the previous file listed as A (added)
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-all
.
show status of all files
.TP
.B \-m,  \-\-modified
.
show only modified files
.TP
.B \-a,  \-\-added
.
show only added files
.TP
.B \-r,  \-\-removed
.
show only removed files
.TP
.B \-d,  \-\-deleted
.
show only deleted (but tracked) files
.TP
.B \-c,  \-\-clean
.
show only files without changes
.TP
.B \-u,  \-\-unknown
.
show only unknown (not tracked) files
.TP
.B \-i,  \-\-ignored
.
show only ignored files
.TP
.B \-n,  \-\-no\-status
.
hide status prefix
.TP
.B \-C,  \-\-copies
.
show source of copied files
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs
.TP
.B \-\-rev
.
show difference from revision
.TP
.B \-\-change
.
list the changed files of a revision
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-S,  \-\-subrepos
.
recurse into subrepositories
.sp
aliases: st
.UNINDENT
.SS summary
.sp
.nf
.ft C
hg summary [\-\-remote]
.ft P
.fi
.sp
This generates a brief summary of the working directory state,
including parents, branch, commit status, and available updates.
.sp
With the \-\-remote option, this will check the default paths for
incoming and outgoing changes. This can be time\-consuming.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-remote
.
check for push and pull
.sp
aliases: sum
.UNINDENT
.SS tag
.sp
.nf
.ft C
hg tag [\-f] [\-l] [\-m TEXT] [\-d DATE] [\-u USER] [\-r REV] NAME...
.ft P
.fi
.sp
Name a particular revision using <name>.
.sp
Tags are used to name particular revisions of the repository and are
very useful to compare different revisions, to go back to significant
earlier versions or to mark branch points as releases, etc. Changing
an existing tag is normally disallowed; use \-f/\-\-force to override.
.sp
If no revision is given, the parent of the working directory is
used, or tip if no revision is checked out.
.sp
To facilitate version control, distribution, and merging of tags,
they are stored as a file named ".hgtags" which is managed similarly
to other project files and can be hand\-edited if necessary. This
also means that tagging creates a new commit. The file
".hg/localtags" is used for local tags (not shared among
repositories).
.sp
Tag commits are usually made at the head of a branch. If the parent
of the working directory is not a branch head, \%\fBhg tag\fP\: aborts; use
\-f/\-\-force to force the tag commit to be based on a non\-head
changeset.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Since tag names have priority over branch names during revision
lookup, using an existing branch name as a tag name is discouraged.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force tag
.TP
.B \-l,  \-\-local
.
make the tag local
.TP
.B \-r,  \-\-rev
.
revision to tag
.TP
.B \-\-remove
.
remove a tag
.TP
.B \-e,  \-\-edit
.
edit commit message
.TP
.B \-m,  \-\-message
.
use <text> as commit message
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.UNINDENT
.SS tags
.sp
.nf
.ft C
hg tags
.ft P
.fi
.sp
This lists both regular and local tags. When the \-v/\-\-verbose
switch is used, a third column "local" is printed for local tags.
.sp
Returns 0 on success.
.SS tip
.sp
.nf
.ft C
hg tip [\-p] [\-g]
.ft P
.fi
.sp
The tip revision (usually just called the tip) is the changeset
most recently added to the repository (and therefore the most
recently changed head).
.sp
If you have just made a commit, that commit will be the tip. If
you have just pulled changes from another repository, the tip of
that repository becomes the current tip. The "tip" tag is special
and cannot be renamed or assigned to a different changeset.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.UNINDENT
.SS unbundle
.sp
.nf
.ft C
hg unbundle [\-u] FILE...
.ft P
.fi
.sp
Apply one or more compressed changegroup files generated by the
bundle command.
.sp
Returns 0 on success, 1 if an update has unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-u,  \-\-update
.
update to new branch head if changesets were unbundled
.UNINDENT
.SS update
.sp
.nf
.ft C
hg update [\-c] [\-C] [\-d DATE] [[\-r] REV]
.ft P
.fi
.sp
Update the repository\(aqs working directory to the specified
changeset. If no changeset is specified, update to the tip of the
current named branch.
.sp
If the changeset is not a descendant of the working directory\(aqs
parent, the update is aborted. With the \-c/\-\-check option, the
working directory is checked for uncommitted changes; if none are
found, the working directory is updated to the specified
changeset.
.sp
The following rules apply when the working directory contains
uncommitted changes:
.INDENT 0.0
.IP 1. 3
.
If neither \-c/\-\-check nor \-C/\-\-clean is specified, and if
the requested changeset is an ancestor or descendant of
the working directory\(aqs parent, the uncommitted changes
are merged into the requested changeset and the merged
result is left uncommitted. If the requested changeset is
not an ancestor or descendant (that is, it is on another
branch), the update is aborted and the uncommitted changes
are preserved.
.IP 2. 3
.
With the \-c/\-\-check option, the update is aborted and the
uncommitted changes are preserved.
.IP 3. 3
.
With the \-C/\-\-clean option, uncommitted changes are discarded and
the working directory is updated to the requested changeset.
.UNINDENT
.sp
Use null as the changeset to remove the working directory (like
\%\fBhg clone \-U\fP\:).
.sp
If you want to update just one file to an older changeset, use
\%\fBhg revert\fP\:.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success, 1 if there are unresolved files.
.sp
Options:
.INDENT 0.0
.TP
.B \-C,  \-\-clean
.
discard uncommitted changes (no backup)
.TP
.B \-c,  \-\-check
.
update across branches if no uncommitted changes
.TP
.B \-d,  \-\-date
.
tipmost revision matching date
.TP
.B \-r,  \-\-rev
.
revision
.sp
aliases: up checkout co
.UNINDENT
.SS verify
.sp
.nf
.ft C
hg verify
.ft P
.fi
.sp
Verify the integrity of the current repository.
.sp
This will perform an extensive check of the repository\(aqs
integrity, validating the hashes and checksums of each entry in
the changelog, manifest, and tracked files, as well as the
integrity of their crosslinks and indices.
.sp
Returns 0 on success, 1 if errors are encountered.
.SS version
.sp
.nf
.ft C
hg version
.ft P
.fi
.sp
output version and copyright information
.SH CONFIGURATION FILES
.sp
Mercurial reads configuration data from several files, if they exist.
Below we list the most specific file first.
.sp
On Windows, these configuration files are read:
.INDENT 0.0
.IP \(bu 2
.
\fB<repo>\e.hg\ehgrc\fP
.IP \(bu 2
.
\fB%USERPROFILE%\e.hgrc\fP
.IP \(bu 2
.
\fB%USERPROFILE%\emercurial.ini\fP
.IP \(bu 2
.
\fB%HOME%\e.hgrc\fP
.IP \(bu 2
.
\fB%HOME%\emercurial.ini\fP
.IP \(bu 2
.
\fBC:\emercurial\emercurial.ini\fP (unless regkey or hgrc.dor mercurial.ini found)
.IP \(bu 2
.
\fBHKEY_LOCAL_MACHINE\eSOFTWARE\eMercurial\fP (unless hgrc.dor mercurial.ini found)
.IP \(bu 2
.
\fB<hg.exe\-dir>\ehgrc.d\e*.rc\fP (unless mercurial.ini found)
.IP \(bu 2
.
\fB<hg.exe\-dir>\emercurial.ini\fP
.UNINDENT
.sp
On Unix, these files are read:
.INDENT 0.0
.IP \(bu 2
.
\fB<repo>/.hg/hgrc\fP
.IP \(bu 2
.
\fB$HOME/.hgrc\fP
.IP \(bu 2
.
\fB/etc/mercurial/hgrc\fP
.IP \(bu 2
.
\fB/etc/mercurial/hgrc.d/*.rc\fP
.IP \(bu 2
.
\fB<install\-root>/etc/mercurial/hgrc\fP
.IP \(bu 2
.
\fB<install\-root>/etc/mercurial/hgrc.d/*.rc\fP
.UNINDENT
.sp
If there is a per\-repository configuration file which is not owned by
the active user, Mercurial will warn you that the file is skipped:
.sp
.nf
.ft C
not trusting file <repo>/.hg/hgrc from untrusted user USER, group GROUP
.ft P
.fi
.sp
If this bothers you, the warning can be silenced (the file would still
be ignored) or trust can be established. Use one of the following
settings, the syntax is explained below:
.INDENT 0.0
.IP \(bu 2
.
\fBui.report_untrusted = False\fP
.IP \(bu 2
.
\fBtrusted.users = USER\fP
.IP \(bu 2
.
\fBtrusted.groups = GROUP\fP
.UNINDENT
.sp
The configuration files for Mercurial use a simple ini\-file format. A
configuration file consists of sections, led by a \fB[section]\fP header
and followed by \fBname = value\fP entries:
.sp
.nf
.ft C
[ui]
username = Firstname Lastname <firstname.lastname@example.net>
verbose = True
.ft P
.fi
.sp
The above entries will be referred to as \fBui.username\fP and
\fBui.verbose\fP, respectively. Please see the hgrc man page for a full
description of the possible configuration values:
.INDENT 0.0
.IP \(bu 2
.
on Unix\-like systems: \fBman hgrc\fP
.IP \(bu 2
.
online: \%http://www.selenic.com/mercurial/hgrc.5.html\:
.UNINDENT
.SH DATE FORMATS
.sp
Some commands allow the user to specify a date, e.g.:
.INDENT 0.0
.IP \(bu 2
.
backout, commit, import, tag: Specify the commit date.
.IP \(bu 2
.
log, revert, update: Select revision(s) by date.
.UNINDENT
.sp
Many date formats are valid. Here are some examples:
.INDENT 0.0
.IP \(bu 2
.
\fBWed Dec 6 13:18:29 2006\fP (local timezone assumed)
.IP \(bu 2
.
\fBDec 6 13:18 \-0600\fP (year assumed, time offset provided)
.IP \(bu 2
.
\fBDec 6 13:18 UTC\fP (UTC and GMT are aliases for +0000)
.IP \(bu 2
.
\fBDec 6\fP (midnight)
.IP \(bu 2
.
\fB13:18\fP (today assumed)
.IP \(bu 2
.
\fB3:39\fP (3:39AM assumed)
.IP \(bu 2
.
\fB3:39pm\fP (15:39)
.IP \(bu 2
.
\fB2006\-12\-06 13:18:29\fP (ISO 8601 format)
.IP \(bu 2
.
\fB2006\-12\-6 13:18\fP
.IP \(bu 2
.
\fB2006\-12\-6\fP
.IP \(bu 2
.
\fB12\-6\fP
.IP \(bu 2
.
\fB12/6\fP
.IP \(bu 2
.
\fB12/6/6\fP (Dec 6 2006)
.UNINDENT
.sp
Lastly, there is Mercurial\(aqs internal format:
.INDENT 0.0
.IP \(bu 2
.
\fB1165432709 0\fP (Wed Dec 6 13:18:29 2006 UTC)
.UNINDENT
.sp
This is the internal representation format for dates. unixtime is the
number of seconds since the epoch (1970\-01\-01 00:00 UTC). offset is
the offset of the local timezone, in seconds west of UTC (negative if
the timezone is east of UTC).
.sp
The log command also accepts date ranges:
.INDENT 0.0
.IP \(bu 2
.
\fB<{datetime}\fP \- at or before a given date/time
.IP \(bu 2
.
\fB>{datetime}\fP \- on or after a given date/time
.IP \(bu 2
.
\fB{datetime} to {datetime}\fP \- a date range, inclusive
.IP \(bu 2
.
\fB\-{days}\fP \- within a given number of days of today
.UNINDENT
.SH FILE NAME PATTERNS
.sp
Mercurial accepts several notations for identifying one or more files
at a time.
.sp
By default, Mercurial treats filenames as shell\-style extended glob
patterns.
.sp
Alternate pattern notations must be specified explicitly.
.sp
To use a plain path name without any pattern matching, start it with
\fBpath:\fP. These path names must completely match starting at the
current repository root.
.sp
To use an extended glob, start a name with \fBglob:\fP. Globs are rooted
at the current directory; a glob such as \fB*.c\fP will only match files
in the current directory ending with \fB.c\fP.
.sp
The supported glob syntax extensions are \fB**\fP to match any string
across path separators and \fB{a,b}\fP to mean "a or b".
.sp
To use a Perl/Python regular expression, start a name with \fBre:\fP.
Regexp pattern matching is anchored at the root of the repository.
.sp
To read name patterns from a file, use \fBlistfile:\fP or \fBlistfile0:\fP.
The latter expects null delimited patterns while the former expects line
feeds. Each string read from the file is itself treated as a file
pattern.
.sp
Plain examples:
.sp
.nf
.ft C
path:foo/bar   a name bar in a directory named foo in the root
               of the repository
path:path:name a file or directory named "path:name"
.ft P
.fi
.sp
Glob examples:
.sp
.nf
.ft C
glob:*.c       any name ending in ".c" in the current directory
*.c            any name ending in ".c" in the current directory
**.c           any name ending in ".c" in any subdirectory of the
               current directory including itself.
foo/*.c        any name ending in ".c" in the directory foo
foo/**.c       any name ending in ".c" in any subdirectory of foo
               including itself.
.ft P
.fi
.sp
Regexp examples:
.sp
.nf
.ft C
re:.*\e.c$      any name ending in ".c", anywhere in the repository
.ft P
.fi
.sp
File examples:
.sp
.nf
.ft C
listfile:list.txt  read list from list.txt with one file pattern per line
listfile0:list.txt read list from list.txt with null byte delimiters
.ft P
.fi
.SH ENVIRONMENT VARIABLES
.INDENT 0.0
.TP
.B HG
.
Path to the \(aqhg\(aq executable, automatically passed when running
hooks, extensions or external tools. If unset or empty, this is
the hg executable\(aqs name if it\(aqs frozen, or an executable named
\(aqhg\(aq (with %PATHEXT% [defaulting to COM/EXE/BAT/CMD] extensions on
Windows) is searched.
.TP
.B HGEDITOR
.
This is the name of the editor to run when committing. See EDITOR.
.sp
(deprecated, use configuration file)
.TP
.B HGENCODING
.
This overrides the default locale setting detected by Mercurial.
This setting is used to convert data including usernames,
changeset descriptions, tag names, and branches. This setting can
be overridden with the \-\-encoding command\-line option.
.TP
.B HGENCODINGMODE
.
This sets Mercurial\(aqs behavior for handling unknown characters
while transcoding user input. The default is "strict", which
causes Mercurial to abort if it can\(aqt map a character. Other
settings include "replace", which replaces unknown characters, and
"ignore", which drops them. This setting can be overridden with
the \-\-encodingmode command\-line option.
.TP
.B HGENCODINGAMBIGUOUS
.
This sets Mercurial\(aqs behavior for handling characters with
"ambiguous" widths like accented Latin characters with East Asian
fonts. By default, Mercurial assumes ambiguous characters are
narrow, set this variable to "wide" if such characters cause
formatting problems.
.TP
.B HGMERGE
.
An executable to use for resolving merge conflicts. The program
will be executed with three arguments: local file, remote file,
ancestor file.
.sp
(deprecated, use configuration file)
.TP
.B HGRCPATH
.
A list of files or directories to search for configuration
files. Item separator is ":" on Unix, ";" on Windows. If HGRCPATH
is not set, platform default search path is used. If empty, only
the .hg/hgrc from the current repository is read.
.sp
For each element in HGRCPATH:
.INDENT 7.0
.IP \(bu 2
.
if it\(aqs a directory, all files ending with .rc are added
.IP \(bu 2
.
otherwise, the file itself will be added
.UNINDENT
.TP
.B HGPLAIN
.
When set, this disables any configuration settings that might
change Mercurial\(aqs default output. This includes encoding,
defaults, verbose mode, debug mode, quiet mode, tracebacks, and
localization. This can be useful when scripting against Mercurial
in the face of existing user configuration.
.sp
Equivalent options set via command line flags or environment
variables are not overridden.
.TP
.B HGUSER
.
This is the string used as the author of a commit. If not set,
available values will be considered in this order:
.INDENT 7.0
.IP \(bu 2
.
HGUSER (deprecated)
.IP \(bu 2
.
configuration files from the HGRCPATH
.IP \(bu 2
.
EMAIL
.IP \(bu 2
.
interactive prompt
.IP \(bu 2
.
LOGNAME (with \fB@hostname\fP appended)
.UNINDENT
.sp
(deprecated, use configuration file)
.TP
.B EMAIL
.
May be used as the author of a commit; see HGUSER.
.TP
.B LOGNAME
.
May be used as the author of a commit; see HGUSER.
.TP
.B VISUAL
.
This is the name of the editor to use when committing. See EDITOR.
.TP
.B EDITOR
.
Sometimes Mercurial needs to open a text file in an editor for a
user to modify, for example when writing commit messages. The
editor it uses is determined by looking at the environment
variables HGEDITOR, VISUAL and EDITOR, in that order. The first
non\-empty one is chosen. If all of them are empty, the editor
defaults to \(aqvi\(aq.
.TP
.B PYTHONPATH
.
This is used by Python to find imported modules and may need to be
set appropriately if this Mercurial is not installed system\-wide.
.UNINDENT
.SH SPECIFYING SINGLE REVISIONS
.sp
Mercurial supports several ways to specify individual revisions.
.sp
A plain integer is treated as a revision number. Negative integers are
treated as sequential offsets from the tip, with \-1 denoting the tip,
\-2 denoting the revision prior to the tip, and so forth.
.sp
A 40\-digit hexadecimal string is treated as a unique revision
identifier.
.sp
A hexadecimal string less than 40 characters long is treated as a
unique revision identifier and is referred to as a short\-form
identifier. A short\-form identifier is only valid if it is the prefix
of exactly one full\-length identifier.
.sp
Any other string is treated as a tag or branch name. A tag name is a
symbolic name associated with a revision identifier. A branch name
denotes the tipmost revision of that branch. Tag and branch names must
not contain the ":" character.
.sp
The reserved name "tip" is a special tag that always identifies the
most recent revision.
.sp
The reserved name "null" indicates the null revision. This is the
revision of an empty repository, and the parent of revision 0.
.sp
The reserved name "." indicates the working directory parent. If no
working directory is checked out, it is equivalent to null. If an
uncommitted merge is in progress, "." is the revision of the first
parent.
.SH SPECIFYING MULTIPLE REVISIONS
.sp
When Mercurial accepts more than one revision, they may be specified
individually, or provided as a topologically continuous range,
separated by the ":" character.
.sp
The syntax of range notation is [BEGIN]:[END], where BEGIN and END are
revision identifiers. Both BEGIN and END are optional. If BEGIN is not
specified, it defaults to revision number 0. If END is not specified,
it defaults to the tip. The range ":" thus means "all revisions".
.sp
If BEGIN is greater than END, revisions are treated in reverse order.
.sp
A range acts as a closed interval. This means that a range of 3:5
gives 3, 4 and 5. Similarly, a range of 9:6 gives 9, 8, 7, and 6.
.SH SPECIFYING REVISION SETS
.sp
Mercurial supports a functional language for selecting a set of
revisions.
.sp
The language supports a number of predicates which are joined by infix
operators. Parenthesis can be used for grouping.
.sp
Identifiers such as branch names must be quoted with single or double
quotes if they contain characters outside of
\fB[._a\-zA\-Z0\-9\ex80\-\exff]\fP or if they match one of the predefined
predicates.
.sp
Special characters can be used in quoted identifiers by escaping them,
e.g., \fB\en\fP is interpreted as a newline. To prevent them from being
interpreted, strings can be prefixed with \fBr\fP, e.g. \fBr\(aq...\(aq\fP.
.sp
There is a single prefix operator:
.INDENT 0.0
.TP
.B \fBnot x\fP
.sp
Changesets not in x. Short form is \fB! x\fP.
.UNINDENT
.sp
These are the supported infix operators:
.INDENT 0.0
.TP
.B \fBx::y\fP
.sp
A DAG range, meaning all changesets that are descendants of x and
ancestors of y, including x and y themselves. If the first endpoint
is left out, this is equivalent to \fBancestors(y)\fP, if the second
is left out it is equivalent to \fBdescendants(x)\fP.
.sp
An alternative syntax is \fBx..y\fP.
.TP
.B \fBx:y\fP
.sp
All changesets with revision numbers between x and y, both
inclusive. Either endpoint can be left out, they default to 0 and
tip.
.TP
.B \fBx and y\fP
.sp
The intersection of changesets in x and y. Short form is \fBx & y\fP.
.TP
.B \fBx or y\fP
.sp
The union of changesets in x and y. There are two alternative short
forms: \fBx | y\fP and \fBx + y\fP.
.TP
.B \fBx \- y\fP
.sp
Changesets in x but not in y.
.UNINDENT
.sp
The following predicates are supported:
.\" predicatesmarker
.
.sp
Command line equivalents for \%\fBhg log\fP\::
.sp
.nf
.ft C
\-f    \->  ::.
\-d x  \->  date(x)
\-k x  \->  keyword(x)
\-m    \->  merge()
\-u x  \->  user(x)
\-b x  \->  branch(x)
\-P x  \->  !::x
\-l x  \->  limit(expr, x)
.ft P
.fi
.sp
Some sample queries:
.INDENT 0.0
.IP \(bu 2
.
Changesets on the default branch:
.sp
.nf
.ft C
hg log \-r "branch(default)"
.ft P
.fi
.IP \(bu 2
.
Changesets on the default branch since tag 1.5 (excluding merges):
.sp
.nf
.ft C
hg log \-r "branch(default) and 1.5:: and not merge()"
.ft P
.fi
.IP \(bu 2
.
Open branch heads:
.sp
.nf
.ft C
hg log \-r "head() and not closed()"
.ft P
.fi
.IP \(bu 2
.
Changesets between tags 1.3 and 1.5 mentioning "bug" that affect
\fBhgext/*\fP:
.sp
.nf
.ft C
hg log \-r "1.3::1.5 and keyword(bug) and file(\(aqhgext/*\(aq)"
.ft P
.fi
.IP \(bu 2
.
Changesets in committed May 2008, sorted by user:
.sp
.nf
.ft C
hg log \-r "sort(date(\(aqMay 2008\(aq), user)"
.ft P
.fi
.IP \(bu 2
.
Changesets mentioning "bug" or "issue" that are not in a tagged
release:
.sp
.nf
.ft C
hg log \-r "(keyword(bug) or keyword(issue)) and not ancestors(tagged())"
.ft P
.fi
.UNINDENT
.SH DIFF FORMATS
.sp
Mercurial\(aqs default format for showing changes between two versions of
a file is compatible with the unified format of GNU diff, which can be
used by GNU patch and many other standard tools.
.sp
While this standard format is often enough, it does not encode the
following information:
.INDENT 0.0
.IP \(bu 2
.
executable status and other permission bits
.IP \(bu 2
.
copy or rename information
.IP \(bu 2
.
changes in binary files
.IP \(bu 2
.
creation or deletion of empty files
.UNINDENT
.sp
Mercurial also supports the extended diff format from the git VCS
which addresses these limitations. The git diff format is not produced
by default because a few widespread tools still do not understand this
format.
.sp
This means that when generating diffs from a Mercurial repository
(e.g. with \%\fBhg export\fP\:), you should be careful about things like file
copies and renames or other things mentioned above, because when
applying a standard diff to a different repository, this extra
information is lost. Mercurial\(aqs internal operations (like push and
pull) are not affected by this, because they use an internal binary
format for communicating changes.
.sp
To make Mercurial produce the git extended diff format, use the \-\-git
option available for many commands, or set \(aqgit = True\(aq in the [diff]
section of your configuration file. You do not need to set this option
when importing diffs in this format or using them in the mq extension.
.SH MERGE TOOLS
.sp
To merge files Mercurial uses merge tools.
.sp
A merge tool combines two different versions of a file into a merged
file. Merge tools are given the two files and the greatest common
ancestor of the two file versions, so they can determine the changes
made on both branches.
.sp
Merge tools are used both for \%\fBhg resolve\fP\:, \%\fBhg merge\fP\:, \%\fBhg update\fP\:,
\%\fBhg backout\fP\: and in several extensions.
.sp
Usually, the merge tool tries to automatically reconcile the files by
combining all non\-overlapping changes that occurred separately in
the two different evolutions of the same initial base file. Furthermore, some
interactive merge programs make it easier to manually resolve
conflicting merges, either in a graphical way, or by inserting some
conflict markers. Mercurial does not include any interactive merge
programs but relies on external tools for that.
.SS Available merge tools
.sp
External merge tools and their properties are configured in the
merge\-tools configuration section \- see hgrc(5) \- but they can often just
be named by their executable.
.sp
A merge tool is generally usable if its executable can be found on the
system and if it can handle the merge. The executable is found if it
is an absolute or relative executable path or the name of an
application in the executable search path. The tool is assumed to be
able to handle the merge if it can handle symlinks if the file is a
symlink, if it can handle binary files if the file is binary, and if a
GUI is available if the tool requires a GUI.
.sp
There are some internal merge tools which can be used. The internal
merge tools are:
.INDENT 0.0
.TP
.B \fBinternal:merge\fP
.sp
Uses the internal non\-interactive simple merge algorithm for merging
files. It will fail if there are any conflicts and leave markers in
the partially merged file.
.TP
.B \fBinternal:fail\fP
.sp
Rather than attempting to merge files that were modified on both
branches, it marks them as unresolved. The resolve command must be
used to resolve these conflicts.
.TP
.B \fBinternal:local\fP
.sp
Uses the local version of files as the merged version.
.TP
.B \fBinternal:other\fP
.sp
Uses the other version of files as the merged version.
.TP
.B \fBinternal:prompt\fP
.sp
Asks the user which of the local or the other version to keep as
the merged version.
.TP
.B \fBinternal:dump\fP
.sp
Creates three versions of the files to merge, containing the
contents of local, other and base. These files can then be used to
perform a merge manually. If the file to be merged is named
\fBa.txt\fP, these files will accordingly be named \fBa.txt.local\fP,
\fBa.txt.other\fP and \fBa.txt.base\fP and they will be placed in the
same directory as \fBa.txt\fP.
.UNINDENT
.sp
Internal tools are always available and do not require a GUI but will by default
not handle symlinks or binary files.
.SS Choosing a merge tool
.sp
Mercurial uses these rules when deciding which merge tool to use:
.INDENT 0.0
.IP 1. 3
.
If a tool has been specified with the \-\-tool option to merge or resolve, it
is used.  If it is the name of a tool in the merge\-tools configuration, its
configuration is used. Otherwise the specified tool must be executable by
the shell.
.IP 2. 3
.
If the \fBHGMERGE\fP environment variable is present, its value is used and
must be executable by the shell.
.IP 3. 3
.
If the filename of the file to be merged matches any of the patterns in the
merge\-patterns configuration section, the first usable merge tool
corresponding to a matching pattern is used. Here, binary capabilities of the
merge tool are not considered.
.IP 4. 3
.
If ui.merge is set it will be considered next. If the value is not the name
of a configured tool, the specified value is used and must be executable by
the shell. Otherwise the named tool is used if it is usable.
.IP 5. 3
.
If any usable merge tools are present in the merge\-tools configuration
section, the one with the highest priority is used.
.IP 6. 3
.
If a program named \fBhgmerge\fP can be found on the system, it is used \- but
it will by default not be used for symlinks and binary files.
.IP 7. 3
.
If the file to be merged is not binary and is not a symlink, then
\fBinternal:merge\fP is used.
.IP 8. 3
.
The merge of the file fails and must be resolved before commit.
.UNINDENT
.IP Note
.
After selecting a merge program, Mercurial will by default attempt
to merge the files using a simple merge algorithm first. Only if it doesn\(aqt
succeed because of conflicting changes Mercurial will actually execute the
merge program. Whether to use the simple merge algorithm first can be
controlled by the premerge setting of the merge tool. Premerge is enabled by
default unless the file is binary or a symlink.
.RE
.sp
See the merge\-tools and ui sections of hgrc(5) for details on the
configuration of merge tools.
.SH TEMPLATE USAGE
.sp
Mercurial allows you to customize output of commands through
templates. You can either pass in a template from the command
line, via the \-\-template option, or select an existing
template\-style (\-\-style).
.sp
You can customize output for any "log\-like" command: log,
outgoing, incoming, tip, parents, heads and glog.
.sp
Four styles are packaged with Mercurial: default (the style used
when no explicit preference is passed), compact, changelog,
and xml.
Usage:
.sp
.nf
.ft C
$ hg log \-r1 \-\-style changelog
.ft P
.fi
.sp
A template is a piece of text, with markup to invoke variable
expansion:
.sp
.nf
.ft C
$ hg log \-r1 \-\-template "{node}\en"
b56ce7b07c52de7d5fd79fb89701ea538af65746
.ft P
.fi
.sp
Strings in curly braces are called keywords. The availability of
keywords depends on the exact context of the templater. These
keywords are usually available for templating a log\-like command:
.INDENT 0.0
.TP
.B author
.
String. The unmodified author of the changeset.
.TP
.B branch
.
String. The name of the branch on which the changeset was
committed.
.TP
.B branches
.
List of strings. The name of the branch on which the
changeset was committed. Will be empty if the branch name was
default.
.TP
.B children
.
List of strings. The children of the changeset.
.TP
.B date
.
Date information. The date when the changeset was committed.
.TP
.B desc
.
String. The text of the changeset description.
.TP
.B diffstat
.
String. Statistics of changes with the following format:
"modified files: +added/\-removed lines"
.TP
.B files
.
List of strings. All files modified, added, or removed by this
changeset.
.TP
.B file_adds
.
List of strings. Files added by this changeset.
.TP
.B file_copies
.
List of strings. Files copied in this changeset with
their sources.
.TP
.B file_copies_switch
.
List of strings. Like "file_copies" but displayed
only if the \-\-copied switch is set.
.TP
.B file_mods
.
List of strings. Files modified by this changeset.
.TP
.B file_dels
.
List of strings. Files removed by this changeset.
.TP
.B node
.
String. The changeset identification hash, as a 40 hexadecimal
digit string.
.TP
.B parents
.
List of strings. The parents of the changeset.
.TP
.B rev
.
Integer. The repository\-local changeset revision number.
.TP
.B tags
.
List of strings. Any tags associated with the changeset.
.TP
.B latesttag
.
String. Most recent global tag in the ancestors of this
changeset.
.TP
.B latesttagdistance
.
Integer. Longest path to the latest tag.
.UNINDENT
.sp
The "date" keyword does not produce human\-readable output. If you
want to use a date in your output, you can use a filter to process
it. Filters are functions which return a string based on the input
variable. Be sure to use the stringify filter first when you\(aqre
applying a string\-input filter to a list\-like input variable.
You can also use a chain of filters to get the desired output:
.sp
.nf
.ft C
$ hg tip \-\-template "{date|isodate}\en"
2008\-08\-21 18:22 +0000
.ft P
.fi
.sp
List of filters:
.INDENT 0.0
.TP
.B addbreaks
.
Any text. Add an XHTML "<br />" tag before the end of
every line except the last.
.TP
.B age
.
Date. Returns a human\-readable date/time difference between the
given date/time and the current date/time.
.TP
.B basename
.
Any text. Treats the text as a path, and returns the last
component of the path after splitting by the path separator
(ignoring trailing separators). For example, "foo/bar/baz" becomes
"baz" and "foo/bar//" becomes "bar".
.TP
.B stripdir
.
Treat the text as path and strip a directory level, if
possible. For example, "foo" and "foo/bar" becomes "foo".
.TP
.B date
.
Date. Returns a date in a Unix date format, including the
timezone: "Mon Sep 04 15:13:13 2006 0700".
.TP
.B domain
.
Any text. Finds the first string that looks like an email
address, and extracts just the domain component. Example: \fBUser
<user@example.com>\fP becomes \fBexample.com\fP.
.TP
.B email
.
Any text. Extracts the first string that looks like an email
address. Example: \fBUser <user@example.com>\fP becomes
\fBuser@example.com\fP.
.TP
.B escape
.
Any text. Replaces the special XML/XHTML characters "&", "<"
and ">" with XML entities.
.TP
.B hex
.
Any text. Convert a binary Mercurial node identifier into
its long hexadecimal representation.
.TP
.B fill68
.
Any text. Wraps the text to fit in 68 columns.
.TP
.B fill76
.
Any text. Wraps the text to fit in 76 columns.
.TP
.B firstline
.
Any text. Returns the first line of text.
.TP
.B nonempty
.
Any text. Returns \(aq(none)\(aq if the string is empty.
.TP
.B hgdate
.
Date. Returns the date as a pair of numbers: "1157407993
25200" (Unix timestamp, timezone offset).
.TP
.B isodate
.
Date. Returns the date in ISO 8601 format: "2009\-08\-18 13:00
+0200".
.TP
.B isodatesec
.
Date. Returns the date in ISO 8601 format, including
seconds: "2009\-08\-18 13:00:13 +0200". See also the rfc3339date
filter.
.TP
.B localdate
.
Date. Converts a date to local date.
.TP
.B obfuscate
.
Any text. Returns the input text rendered as a sequence of
XML entities.
.TP
.B person
.
Any text. Returns the text before an email address.
.TP
.B rfc822date
.
Date. Returns a date using the same format used in email
headers: "Tue, 18 Aug 2009 13:00:13 +0200".
.TP
.B rfc3339date
.
Date. Returns a date using the Internet date format
specified in RFC 3339: "2009\-08\-18T13:00:13+02:00".
.TP
.B short
.
Changeset hash. Returns the short form of a changeset hash,
i.e. a 12 hexadecimal digit string.
.TP
.B shortdate
.
Date. Returns a date like "2006\-09\-18".
.TP
.B stringify
.
Any type. Turns the value into text by converting values into
text and concatenating them.
.TP
.B strip
.
Any text. Strips all leading and trailing whitespace.
.TP
.B tabindent
.
Any text. Returns the text, with every line except the
first starting with a tab character.
.TP
.B urlescape
.
Any text. Escapes all "special" characters. For example,
"foo bar" becomes "foo%20bar".
.TP
.B user
.
Any text. Returns the user portion of an email address.
.UNINDENT
.SH URL PATHS
.sp
Valid URLs are of the form:
.sp
.nf
.ft C
local/filesystem/path[#revision]
file://local/filesystem/path[#revision]
http://[user[:pass]@]host[:port]/[path][#revision]
https://[user[:pass]@]host[:port]/[path][#revision]
ssh://[user@]host[:port]/[path][#revision]
.ft P
.fi
.sp
Paths in the local filesystem can either point to Mercurial
repositories or to bundle files (as created by \%\fBhg bundle\fP\: or :hg:\(ga
incoming \-\-bundle\(ga). See also \%\fBhg help paths\fP\:.
.sp
An optional identifier after # indicates a particular branch, tag, or
changeset to use from the remote repository. See also \%\fBhg help
revisions\fP\:.
.sp
Some features, such as pushing to \%http://\: and \%https://\: URLs are only
possible if the feature is explicitly enabled on the remote Mercurial
server.
.sp
Note that the security of HTTPS URLs depends on proper configuration of
web.cacerts.
.sp
Some notes about using SSH with Mercurial:
.INDENT 0.0
.IP \(bu 2
.
SSH requires an accessible shell account on the destination machine
and a copy of hg in the remote path or specified with as remotecmd.
.IP \(bu 2
.
path is relative to the remote user\(aqs home directory by default. Use
an extra slash at the start of a path to specify an absolute path:
.sp
.nf
.ft C
ssh://example.com//tmp/repository
.ft P
.fi
.IP \(bu 2
.
Mercurial doesn\(aqt use its own compression via SSH; the right thing
to do is to configure it in your ~/.ssh/config, e.g.:
.sp
.nf
.ft C
Host *.mylocalnetwork.example.com
  Compression no
Host *
  Compression yes
.ft P
.fi
.sp
Alternatively specify "ssh \-C" as your ssh command in your
configuration file or with the \-\-ssh command line option.
.UNINDENT
.sp
These URLs can all be stored in your configuration file with path
aliases under the [paths] section like so:
.sp
.nf
.ft C
[paths]
alias1 = URL1
alias2 = URL2
\&...
.ft P
.fi
.sp
You can then use the alias for any command that uses a URL (for
example \%\fBhg pull alias1\fP\: will be treated as \%\fBhg pull URL1\fP\:).
.sp
Two path aliases are special because they are used as defaults when
you do not provide the URL to a command:
.INDENT 0.0
.TP
.B default:
.
When you create a repository with hg clone, the clone command saves
the location of the source repository as the new repository\(aqs
\(aqdefault\(aq path. This is then used when you omit path from push\- and
pull\-like commands (including incoming and outgoing).
.TP
.B default\-push:
.
The push command will look for a path named \(aqdefault\-push\(aq, and
prefer it over \(aqdefault\(aq if both are defined.
.UNINDENT
.SH USING ADDITIONAL FEATURES
.sp
Mercurial has the ability to add new features through the use of
extensions. Extensions may add new commands, add options to
existing commands, change the default behavior of commands, or
implement hooks.
.sp
Extensions are not loaded by default for a variety of reasons:
they can increase startup overhead; they may be meant for advanced
usage only; they may provide potentially dangerous abilities (such
as letting you destroy or modify history); they might not be ready
for prime time; or they may alter some usual behaviors of stock
Mercurial. It is thus up to the user to activate extensions as
needed.
.sp
To enable the "foo" extension, either shipped with Mercurial or in the
Python search path, create an entry for it in your configuration file,
like this:
.sp
.nf
.ft C
[extensions]
foo =
.ft P
.fi
.sp
You may also specify the full path to an extension:
.sp
.nf
.ft C
[extensions]
myfeature = ~/.hgext/myfeature.py
.ft P
.fi
.sp
To explicitly disable an extension enabled in a configuration file of
broader scope, prepend its path with !:
.sp
.nf
.ft C
[extensions]
# disabling extension bar residing in /path/to/extension/bar.py
bar = !/path/to/extension/bar.py
# ditto, but no path was supplied for extension baz
baz = !
.ft P
.fi
.sp
disabled extensions:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B acl
.
hooks for controlling repository access
.TP
.B bugzilla
.
hooks for integrating with the Bugzilla bug tracker
.TP
.B children
.
command to display child changesets
.TP
.B churn
.
command to display statistics about repository history
.TP
.B color
.
colorize output from some commands
.TP
.B convert
.
import revisions from foreign VCS repositories into Mercurial
.TP
.B eol
.
automatically manage newlines in repository files
.TP
.B extdiff
.
command to allow external programs to compare revisions
.TP
.B fetch
.
pull, update and merge in one command
.TP
.B gpg
.
commands to sign and verify changesets
.TP
.B graphlog
.
command to view revision graphs from a shell
.TP
.B hgcia
.
hooks for integrating with the CIA.vc notification service
.TP
.B hgk
.
browse the repository in a graphical way
.TP
.B highlight
.
syntax highlighting for hgweb (requires Pygments)
.TP
.B inotify
.
accelerate status report using Linux\(aqs inotify service
.TP
.B interhg
.
expand expressions into changelog and summaries
.TP
.B keyword
.
expand keywords in tracked files
.TP
.B mq
.
manage a stack of patches
.TP
.B notify
.
hooks for sending email notifications at commit/push time
.TP
.B pager
.
browse command output with an external pager
.TP
.B parentrevspec
.
interpret suffixes to refer to ancestor revisions
.TP
.B patchbomb
.
command to send changesets as (a series of) patch emails
.TP
.B progress
.
show progress bars for some actions
.TP
.B purge
.
command to delete untracked files from the working directory
.TP
.B rebase
.
command to move sets of revisions to a different ancestor
.TP
.B record
.
commands to interactively select changes for commit/qrefresh
.TP
.B relink
.
recreates hardlinks between repository clones
.TP
.B schemes
.
extend schemes with shortcuts to repository swarms
.TP
.B share
.
share a common history between several working directories
.TP
.B transplant
.
command to transplant changesets from another branch
.TP
.B win32mbcs
.
allow the use of MBCS paths with problematic encodings
.TP
.B win32text
.
perform automatic newline conversion
.TP
.B zeroconf
.
discover and advertise repositories on the local network
.UNINDENT
.UNINDENT
.UNINDENT
.SH SUBREPOSITORIES
.sp
Subrepositories let you nest external repositories or projects into a
parent Mercurial repository, and make commands operate on them as a
group. External Mercurial and Subversion projects are currently
supported.
.sp
Subrepositories are made of three components:
.INDENT 0.0
.IP 1. 3
.
Nested repository checkouts. They can appear anywhere in the
parent working directory, and are Mercurial clones or Subversion
checkouts.
.IP 2. 3
.
Nested repository references. They are defined in \fB.hgsub\fP and
tell where the subrepository checkouts come from. Mercurial
subrepositories are referenced like:
.INDENT 3.0
.INDENT 3.5
.sp
path/to/nested = \%https://example.com/nested/repo/path\:
.UNINDENT
.UNINDENT
.sp
where \fBpath/to/nested\fP is the checkout location relatively to the
parent Mercurial root, and \fBhttps://example.com/nested/repo/path\fP
is the source repository path. The source can also reference a
filesystem path. Subversion repositories are defined with:
.INDENT 3.0
.INDENT 3.5
.sp
path/to/nested = [svn]https://example.com/nested/trunk/path
.UNINDENT
.UNINDENT
.sp
Note that \fB.hgsub\fP does not exist by default in Mercurial
repositories, you have to create and add it to the parent
repository before using subrepositories.
.IP 3. 3
.
Nested repository states. They are defined in \fB.hgsubstate\fP and
capture whatever information is required to restore the
subrepositories to the state they were committed in a parent
repository changeset. Mercurial automatically record the nested
repositories states when committing in the parent repository.
.IP Note
.
The \fB.hgsubstate\fP file should not be edited manually.
.RE
.UNINDENT
.SH ADDING A SUBREPOSITORY
.sp
If \fB.hgsub\fP does not exist, create it and add it to the parent
repository. Clone or checkout the external projects where you want it
to live in the parent repository. Edit \fB.hgsub\fP and add the
subrepository entry as described above. At this point, the
subrepository is tracked and the next commit will record its state in
\fB.hgsubstate\fP and bind it to the committed changeset.
.SH SYNCHRONIZING A SUBREPOSITORY
.sp
Subrepos do not automatically track the latest changeset of their
sources. Instead, they are updated to the changeset that corresponds
with the changeset checked out in the top\-level changeset. This is so
developers always get a consistent set of compatible code and
libraries when they update.
.sp
Thus, updating subrepos is a manual process. Simply check out target
subrepo at the desired revision, test in the top\-level repo, then
commit in the parent repository to record the new combination.
.SH DELETING A SUBREPOSITORY
.sp
To remove a subrepository from the parent repository, delete its
reference from \fB.hgsub\fP, then remove its files.
.SH INTERACTION WITH MERCURIAL COMMANDS
.INDENT 0.0
.TP
.B add
.
add does not recurse in subrepos unless \-S/\-\-subrepos is
specified. Subversion subrepositories are currently silently
ignored.
.TP
.B archive
.
archive does not recurse in subrepositories unless
\-S/\-\-subrepos is specified.
.TP
.B commit
.
commit creates a consistent snapshot of the state of the
entire project and its subrepositories. It does this by first
attempting to commit all modified subrepositories, then recording
their state and finally committing it in the parent
repository. Mercurial can be made to abort if any subrepository
content is modified by setting "ui.commitsubrepos=no" in a
configuration file (see \%\fBhg help config\fP\:).
.TP
.B diff
.
diff does not recurse in subrepos unless \-S/\-\-subrepos is
specified. Changes are displayed as usual, on the subrepositories
elements. Subversion subrepositories are currently silently
ignored.
.TP
.B incoming
.
incoming does not recurse in subrepos unless \-S/\-\-subrepos
is specified. Subversion subrepositories are currently silently
ignored.
.TP
.B outgoing
.
outgoing does not recurse in subrepos unless \-S/\-\-subrepos
is specified. Subversion subrepositories are currently silently
ignored.
.TP
.B pull
.
pull is not recursive since it is not clear what to pull prior
to running \%\fBhg update\fP\:. Listing and retrieving all
subrepositories changes referenced by the parent repository pulled
changesets is expensive at best, impossible in the Subversion
case.
.TP
.B push
.
Mercurial will automatically push all subrepositories first
when the parent repository is being pushed. This ensures new
subrepository changes are available when referenced by top\-level
repositories.
.TP
.B status
.
status does not recurse into subrepositories unless
\-S/\-\-subrepos is specified. Subrepository changes are displayed as
regular Mercurial changes on the subrepository
elements. Subversion subrepositories are currently silently
ignored.
.TP
.B update
.
update restores the subrepos in the state they were
originally committed in target changeset. If the recorded
changeset is not available in the current subrepository, Mercurial
will pull it in first before updating.  This means that updating
can require network access when using subrepositories.
.UNINDENT
.SH REMAPPING SUBREPOSITORIES SOURCES
.sp
A subrepository source location may change during a project life,
invalidating references stored in the parent repository history. To
fix this, rewriting rules can be defined in parent repository \fBhgrc\fP
file or in Mercurial configuration. See the \fB[subpaths]\fP section in
hgrc(5) for more details.
.SH CONFIGURING HGWEB
.sp
Mercurial\(aqs internal web server, hgweb, can serve either a single
repository, or a collection of them. In the latter case, a special
configuration file can be used to specify the repository paths to use
and global web configuration options.
.sp
This file uses the same syntax as hgrc configuration files, but only
the following sections are recognized:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
web
.IP \(bu 2
.
paths
.IP \(bu 2
.
collections
.UNINDENT
.UNINDENT
.UNINDENT
.sp
The \fBweb\fP section can specify all the settings described in the web
section of the hgrc documentation.
.sp
The \fBpaths\fP section provides mappings of physical repository
paths to virtual ones. For instance:
.sp
.nf
.ft C
[paths]
projects/a = /foo/bar
projects/b = /baz/quux
web/root = /real/root/*
/ = /real/root2/*
virtual/root2 = /real/root2/**
.ft P
.fi
.INDENT 0.0
.IP \(bu 2
.
The first two entries make two repositories in different directories
appear under the same directory in the web interface
.IP \(bu 2
.
The third entry maps every Mercurial repository found in \(aq/real/root\(aq
into \(aqweb/root\(aq. This format is preferred over the [collections] one,
since using absolute paths as configuration keys is not supported on every
platform (especially on Windows).
.IP \(bu 2
.
The fourth entry is a special case mapping all repositories in
\(aq/real/root2\(aq in the root of the virtual directory.
.IP \(bu 2
.
The fifth entry recursively finds all repositories under the real
root, and maps their relative paths under the virtual root.
.UNINDENT
.sp
The \fBcollections\fP section provides mappings of trees of physical
repositories paths to virtual ones, though the paths syntax is generally
preferred. For instance:
.sp
.nf
.ft C
[collections]
/foo = /foo
.ft P
.fi
.sp
Here, the left side will be stripped off all repositories found in the
right side. Thus \fB/foo/bar\fP and \fBfoo/quux/baz\fP will be listed as
\fBbar\fP and \fBquux/baz\fP respectively.
.SH GLOSSARY
.INDENT 0.0
.TP
.B Ancestor
.
Any changeset that can be reached by an unbroken chain of parent
changesets from a given changeset. More precisely, the ancestors
of a changeset can be defined by two properties: a parent of a
changeset is an ancestor, and a parent of an ancestor is an
ancestor. See also: \(aqDescendant\(aq.
.TP
.B Branch
.
(Noun) A child changeset that has been created from a parent that
is not a head. These are known as topological branches, see
\(aqBranch, topological\(aq. If a topological branch is named, it becomes
a named branch. If a topological branch is not named, it becomes
an anonymous branch. See \(aqBranch, anonymous\(aq and \(aqBranch, named\(aq.
.sp
Branches may be created when changes are pulled from or pushed to
a remote repository, since new heads may be created by these
operations. Note that the term branch can also be used informally
to describe a development process in which certain development is
done independently of other development. This is sometimes done
explicitly with a named branch, but it can also be done locally,
using bookmarks or clones and anonymous branches.
.sp
Example: "The experimental branch".
.sp
(Verb) The action of creating a child changeset which results in
its parent having more than one child.
.sp
Example: "I\(aqm going to branch at X".
.TP
.B Branch, anonymous
.
Every time a new child changeset is created from a parent that is not
a head and the name of the branch is not changed, a new anonymous
branch is created.
.TP
.B Branch, closed
.
A named branch whose branch heads have all been closed.
.TP
.B Branch, default
.
The branch assigned to a changeset when no name has previously been
assigned.
.TP
.B Branch head
.
See \(aqHead, branch\(aq.
.TP
.B Branch, inactive
.
If a named branch has no topological heads, it is considered to be
inactive. As an example, a feature branch becomes inactive when it
is merged into the default branch. The \%\fBhg branches\fP\: command
shows inactive branches by default, though they can be hidden with
\%\fBhg branches \-\-active\fP\:.
.sp
NOTE: this concept is deprecated because it is too implicit.
Branches should now be explicitly closed using \%\fBhg commit
\-\-close\-branch\fP\: when they are no longer needed.
.TP
.B Branch, named
.
A collection of changesets which have the same branch name. By
default, children of a changeset in a named branch belong to the
same named branch. A child can be explicitly assigned to a
different branch. See \%\fBhg help branch\fP\:, \%\fBhg help branches\fP\: and
\%\fBhg commit \-\-close\-branch\fP\: for more information on managing
branches.
.sp
Named branches can be thought of as a kind of namespace, dividing
the collection of changesets that comprise the repository into a
collection of disjoint subsets. A named branch is not necessarily
a topological branch. If a new named branch is created from the
head of another named branch, or the default branch, but no
further changesets are added to that previous branch, then that
previous branch will be a branch in name only.
.TP
.B Branch tip
.
See \(aqTip, branch\(aq.
.TP
.B Branch, topological
.
Every time a new child changeset is created from a parent that is
not a head, a new topological branch is created. If a topological
branch is named, it becomes a named branch. If a topological
branch is not named, it becomes an anonymous branch of the
current, possibly default, branch.
.TP
.B Changelog
.
A record of the changesets in the order in which they were added
to the repository. This includes details such as changeset id,
author, commit message, date, and list of changed files.
.TP
.B Changeset
.
A snapshot of the state of the repository used to record a change.
.TP
.B Changeset, child
.
The converse of parent changeset: if P is a parent of C, then C is
a child of P. There is no limit to the number of children that a
changeset may have.
.TP
.B Changeset id
.
A SHA\-1 hash that uniquely identifies a changeset. It may be
represented as either a "long" 40 hexadecimal digit string, or a
"short" 12 hexadecimal digit string.
.TP
.B Changeset, merge
.
A changeset with two parents. This occurs when a merge is
committed.
.TP
.B Changeset, parent
.
A revision upon which a child changeset is based. Specifically, a
parent changeset of a changeset C is a changeset whose node
immediately precedes C in the DAG. Changesets have at most two
parents.
.TP
.B Checkout
.
(Noun) The working directory being updated to a specific
revision. This use should probably be avoided where possible, as
changeset is much more appropriate than checkout in this context.
.sp
Example: "I\(aqm using checkout X."
.sp
(Verb) Updating the working directory to a specific changeset. See
\%\fBhg help update\fP\:.
.sp
Example: "I\(aqm going to check out changeset X."
.TP
.B Child changeset
.
See \(aqChangeset, child\(aq.
.TP
.B Close changeset
.
See \(aqChangeset, close\(aq.
.TP
.B Closed branch
.
See \(aqBranch, closed\(aq.
.TP
.B Clone
.
(Noun) An entire or partial copy of a repository. The partial
clone must be in the form of a revision and its ancestors.
.sp
Example: "Is your clone up to date?".
.sp
(Verb) The process of creating a clone, using \%\fBhg clone\fP\:.
.sp
Example: "I\(aqm going to clone the repository".
.TP
.B Closed branch head
.
See \(aqHead, closed branch\(aq.
.TP
.B Commit
.
(Noun) A synonym for changeset.
.sp
Example: "Is the bug fixed in your recent commit?"
.sp
(Verb) The act of recording changes to a repository. When files
are committed in a working directory, Mercurial finds the
differences between the committed files and their parent
changeset, creating a new changeset in the repository.
.sp
Example: "You should commit those changes now."
.TP
.B Cset
.
A common abbreviation of the term changeset.
.TP
.B DAG
.
The repository of changesets of a distributed version control
system (DVCS) can be described as a directed acyclic graph (DAG),
consisting of nodes and edges, where nodes correspond to
changesets and edges imply a parent \-> child relation. This graph
can be visualized by graphical tools such as \%\fBhg glog\fP\:
(graphlog). In Mercurial, the DAG is limited by the requirement
for children to have at most two parents.
.TP
.B Default branch
.
See \(aqBranch, default\(aq.
.TP
.B Descendant
.
Any changeset that can be reached by a chain of child changesets
from a given changeset. More precisely, the descendants of a
changeset can be defined by two properties: the child of a
changeset is a descendant, and the child of a descendant is a
descendant. See also: \(aqAncestor\(aq.
.TP
.B Diff
.
(Noun) The difference between the contents and attributes of files
in two changesets or a changeset and the current working
directory. The difference is usually represented in a standard
form called a "diff" or "patch". The "git diff" format is used
when the changes include copies, renames, or changes to file
attributes, none of which can be represented/handled by classic
"diff" and "patch".
.sp
Example: "Did you see my correction in the diff?"
.sp
(Verb) Diffing two changesets is the action of creating a diff or
patch.
.sp
Example: "If you diff with changeset X, you will see what I mean."
.TP
.B Directory, working
.
The working directory represents the state of the files tracked by
Mercurial, that will be recorded in the next commit. The working
directory initially corresponds to the snapshot at an existing
changeset, known as the parent of the working directory. See
\(aqParent, working directory\(aq. The state may be modified by changes
to the files introduced manually or by a merge. The repository
metadata exists in the .hg directory inside the working directory.
.TP
.B Graph
.
See DAG and \%\fBhg help graphlog\fP\:.
.TP
.B Head
.
The term \(aqhead\(aq may be used to refer to both a branch head or a
repository head, depending on the context. See \(aqHead, branch\(aq and
\(aqHead, repository\(aq for specific definitions.
.sp
Heads are where development generally takes place and are the
usual targets for update and merge operations.
.TP
.B Head, branch
.
A changeset with no descendants on the same named branch.
.TP
.B Head, closed branch
.
A changeset that marks a head as no longer interesting. The closed
head is no longer listed by \%\fBhg heads\fP\:. A branch is considered
closed when all its heads are closed and consequently is not
listed by \%\fBhg branches\fP\:.
.TP
.B Head, repository
.
A topological head which has not been closed.
.TP
.B Head, topological
.
A changeset with no children in the repository.
.TP
.B History, immutable
.
Once committed, changesets cannot be altered.  Extensions which
appear to change history actually create new changesets that
replace existing ones, and then destroy the old changesets. Doing
so in public repositories can result in old changesets being
reintroduced to the repository.
.TP
.B History, rewriting
.
The changesets in a repository are immutable. However, extensions
to Mercurial can be used to alter the repository, usually in such
a way as to preserve changeset contents.
.TP
.B Immutable history
.
See \(aqHistory, immutable\(aq.
.TP
.B Merge changeset
.
See \(aqChangeset, merge\(aq.
.TP
.B Manifest
.
Each changeset has a manifest, which is the list of files that are
tracked by the changeset.
.TP
.B Merge
.
Used to bring together divergent branches of work. When you update
to a changeset and then merge another changeset, you bring the
history of the latter changeset into your working directory. Once
conflicts are resolved (and marked), this merge may be committed
as a merge changeset, bringing two branches together in the DAG.
.TP
.B Named branch
.
See \(aqBranch, named\(aq.
.TP
.B Null changeset
.
The empty changeset. It is the parent state of newly\-initialized
repositories and repositories with no checked out revision. It is
thus the parent of root changesets and the effective ancestor when
merging unrelated changesets. Can be specified by the alias \(aqnull\(aq
or by the changeset ID \(aq000000000000\(aq.
.TP
.B Parent
.
See \(aqChangeset, parent\(aq.
.TP
.B Parent changeset
.
See \(aqChangeset, parent\(aq.
.TP
.B Parent, working directory
.
The working directory parent reflects a virtual revision which is
the child of the changeset (or two changesets with an uncommitted
merge) shown by \%\fBhg parents\fP\:. This is changed with
\%\fBhg update\fP\:. Other commands to see the working directory parent
are \%\fBhg summary\fP\: and \%\fBhg id\fP\:. Can be specified by the alias ".".
.TP
.B Patch
.
(Noun) The product of a diff operation.
.sp
Example: "I\(aqve sent you my patch."
.sp
(Verb) The process of using a patch file to transform one
changeset into another.
.sp
Example: "You will need to patch that revision."
.TP
.B Pull
.
An operation in which changesets in a remote repository which are
not in the local repository are brought into the local
repository. Note that this operation without special arguments
only updates the repository, it does not update the files in the
working directory. See \%\fBhg help pull\fP\:.
.TP
.B Push
.
An operation in which changesets in a local repository which are
not in a remote repository are sent to the remote repository. Note
that this operation only adds changesets which have been committed
locally to the remote repository. Uncommitted changes are not
sent. See \%\fBhg help push\fP\:.
.TP
.B Repository
.
The metadata describing all recorded states of a collection of
files. Each recorded state is represented by a changeset. A
repository is usually (but not always) found in the \fB.hg\fP
subdirectory of a working directory. Any recorded state can be
recreated by "updating" a working directory to a specific
changeset.
.TP
.B Repository head
.
See \(aqHead, repository\(aq.
.TP
.B Revision
.
A state of the repository at some point in time. Earlier revisions
can be updated to by using \%\fBhg update\fP\:.  See also \(aqRevision
number\(aq; See also \(aqChangeset\(aq.
.TP
.B Revision number
.
This integer uniquely identifies a changeset in a specific
repository. It represents the order in which changesets were added
to a repository, starting with revision number 0. Note that the
revision number may be different in each clone of a repository. To
identify changesets uniquely between different clones, see
\(aqChangeset id\(aq.
.TP
.B Revlog
.
History storage mechanism used by Mercurial. It is a form of delta
encoding, with occasional full revision of data followed by delta
of each successive revision. It includes data and an index
pointing to the data.
.TP
.B Rewriting history
.
See \(aqHistory, rewriting\(aq.
.TP
.B Root
.
A changeset that has only the null changeset as its parent. Most
repositories have only a single root changeset.
.TP
.B Tip
.
The changeset with the highest revision number. It is the changeset
most recently added in a repository.
.TP
.B Tip, branch
.
The head of a given branch with the highest revision number. When
a branch name is used as a revision identifier, it refers to the
branch tip. See also \(aqBranch, head\(aq. Note that because revision
numbers may be different in different repository clones, the
branch tip may be different in different cloned repositories.
.TP
.B Update
.
(Noun) Another synonym of changeset.
.sp
Example: "I\(aqve pushed an update".
.sp
(Verb) This term is usually used to describe updating the state of
the working directory to that of a specific changeset. See
\%\fBhg help update\fP\:.
.sp
Example: "You should update".
.TP
.B Working directory
.
See \(aqDirectory, working\(aq.
.TP
.B Working directory parent
.
See \(aqParent, working directory\(aq.
.UNINDENT
.SH EXTENSIONS
.sp
This section contains help for extensions that are distributed together with Mercurial. Help for other extensions is available in the help system.
.SS acl
.sp
hooks for controlling repository access
.sp
This hook makes it possible to allow or deny write access to given
branches and paths of a repository when receiving incoming changesets
via pretxnchangegroup and pretxncommit.
.sp
The authorization is matched based on the local user name on the
system where the hook runs, and not the committer of the original
changeset (since the latter is merely informative).
.sp
The acl hook is best used along with a restricted shell like hgsh,
preventing authenticating users from doing anything other than pushing
or pulling. The hook is not safe to use if users have interactive
shell access, as they can then disable the hook. Nor is it safe if
remote users share an account, because then there is no way to
distinguish them.
.sp
The order in which access checks are performed is:
.INDENT 0.0
.IP 1. 3
.
Deny  list for branches (section \fBacl.deny.branches\fP)
.IP 2. 3
.
Allow list for branches (section \fBacl.allow.branches\fP)
.IP 3. 3
.
Deny  list for paths    (section \fBacl.deny\fP)
.IP 4. 3
.
Allow list for paths    (section \fBacl.allow\fP)
.UNINDENT
.sp
The allow and deny sections take key\-value pairs.
.SS Branch\-based Access Control
.sp
Use the \fBacl.deny.branches\fP and \fBacl.allow.branches\fP sections to
have branch\-based access control. Keys in these sections can be
either:
.INDENT 0.0
.IP \(bu 2
.
a branch name, or
.IP \(bu 2
.
an asterisk, to match any branch;
.UNINDENT
.sp
The corresponding values can be either:
.INDENT 0.0
.IP \(bu 2
.
a comma\-separated list containing users and groups, or
.IP \(bu 2
.
an asterisk, to match anyone;
.UNINDENT
.SS Path\-based Access Control
.sp
Use the \fBacl.deny\fP and \fBacl.allow\fP sections to have path\-based
access control. Keys in these sections accept a subtree pattern (with
a glob syntax by default). The corresponding values follow the same
syntax as the other sections above.
.SS Groups
.sp
Group names must be prefixed with an \fB@\fP symbol. Specifying a group
name has the same effect as specifying all the users in that group.
.sp
You can define group members in the \fBacl.groups\fP section.
If a group name is not defined there, and Mercurial is running under
a Unix\-like system, the list of users will be taken from the OS.
Otherwise, an exception will be raised.
.SS Example Configuration
.sp
.nf
.ft C
[hooks]

# Use this if you want to check access restrictions at commit time
pretxncommit.acl = python:hgext.acl.hook

# Use this if you want to check access restrictions for pull, push,
# bundle and serve.
pretxnchangegroup.acl = python:hgext.acl.hook

[acl]
# Allow or deny access for incoming changes only if their source is
# listed here, let them pass otherwise. Source is "serve" for all
# remote access (http or ssh), "push", "pull" or "bundle" when the
# related commands are run locally.
# Default: serve
sources = serve

[acl.deny.branches]

# Everyone is denied to the frozen branch:
frozen\-branch = *

# A bad user is denied on all branches:
* = bad\-user

[acl.allow.branches]

# A few users are allowed on branch\-a:
branch\-a = user\-1, user\-2, user\-3

# Only one user is allowed on branch\-b:
branch\-b = user\-1

# The super user is allowed on any branch:
* = super\-user

# Everyone is allowed on branch\-for\-tests:
branch\-for\-tests = *

[acl.deny]
# This list is checked first. If a match is found, acl.allow is not
# checked. All users are granted access if acl.deny is not present.
# Format for both lists: glob pattern = user, ..., @group, ...

# To match everyone, use an asterisk for the user:
# my/glob/pattern = *

# user6 will not have write access to any file:
** = user6

# Group "hg\-denied" will not have write access to any file:
** = @hg\-denied

# Nobody will be able to change "DONT\-TOUCH\-THIS.txt", despite
# everyone being able to change all other files. See below.
src/main/resources/DONT\-TOUCH\-THIS.txt = *

[acl.allow]
# if acl.allow is not present, all users are allowed by default
# empty acl.allow = no users allowed

# User "doc_writer" has write access to any file under the "docs"
# folder:
docs/** = doc_writer

# User "jack" and group "designers" have write access to any file
# under the "images" folder:
images/** = jack, @designers

# Everyone (except for "user6" \- see acl.deny above) will have write
# access to any file under the "resources" folder (except for 1
# file. See acl.deny):
src/main/resources/** = *

\&.hgtags = release_engineer
.ft P
.fi
.SS bugzilla
.sp
hooks for integrating with the Bugzilla bug tracker
.sp
This hook extension adds comments on bugs in Bugzilla when changesets
that refer to bugs by Bugzilla ID are seen. The hook does not change
bug status.
.sp
The hook updates the Bugzilla database directly. Only Bugzilla
installations using MySQL are supported.
.sp
The hook relies on a Bugzilla script to send bug change notification
emails. That script changes between Bugzilla versions; the
\(aqprocessmail\(aq script used prior to 2.18 is replaced in 2.18 and
subsequent versions by \(aqconfig/sendbugmail.pl\(aq. Note that these will
be run by Mercurial as the user pushing the change; you will need to
ensure the Bugzilla install file permissions are set appropriately.
.sp
The extension is configured through three different configuration
sections. These keys are recognized in the [bugzilla] section:
.INDENT 0.0
.TP
.B host
.
Hostname of the MySQL server holding the Bugzilla database.
.TP
.B db
.
Name of the Bugzilla database in MySQL. Default \(aqbugs\(aq.
.TP
.B user
.
Username to use to access MySQL server. Default \(aqbugs\(aq.
.TP
.B password
.
Password to use to access MySQL server.
.TP
.B timeout
.
Database connection timeout (seconds). Default 5.
.TP
.B version
.
Bugzilla version. Specify \(aq3.0\(aq for Bugzilla versions 3.0 and later,
\(aq2.18\(aq for Bugzilla versions from 2.18 and \(aq2.16\(aq for versions prior
to 2.18.
.TP
.B bzuser
.
Fallback Bugzilla user name to record comments with, if changeset
committer cannot be found as a Bugzilla user.
.TP
.B bzdir
.
Bugzilla install directory. Used by default notify. Default
\(aq/var/www/html/bugzilla\(aq.
.TP
.B notify
.
The command to run to get Bugzilla to send bug change notification
emails. Substitutes from a map with 3 keys, \(aqbzdir\(aq, \(aqid\(aq (bug id)
and \(aquser\(aq (committer bugzilla email). Default depends on version;
from 2.18 it is "cd %(bzdir)s && perl \-T contrib/sendbugmail.pl
%(id)s %(user)s".
.TP
.B regexp
.
Regular expression to match bug IDs in changeset commit message.
Must contain one "()" group. The default expression matches \(aqBug
1234\(aq, \(aqBug no. 1234\(aq, \(aqBug number 1234\(aq, \(aqBugs 1234,5678\(aq, \(aqBug
1234 and 5678\(aq and variations thereof. Matching is case insensitive.
.TP
.B style
.
The style file to use when formatting comments.
.TP
.B template
.
Template to use when formatting comments. Overrides style if
specified. In addition to the usual Mercurial keywords, the
extension specifies:
.sp
.nf
.ft C
{bug}       The Bugzilla bug ID.
{root}      The full pathname of the Mercurial repository.
{webroot}   Stripped pathname of the Mercurial repository.
{hgweb}     Base URL for browsing Mercurial repositories.
.ft P
.fi
.INDENT 7.0
.TP
.B Default \(aqchangeset {node|short} in repo {root} refers \(aq
.
\(aqto bug {bug}.ndetails:nt{desc|tabindent}\(aq
.UNINDENT
.TP
.B strip
.
The number of slashes to strip from the front of {root} to produce
{webroot}. Default 0.
.TP
.B usermap
.
Path of file containing Mercurial committer ID to Bugzilla user ID
mappings. If specified, the file should contain one mapping per
line, "committer"="Bugzilla user". See also the [usermap] section.
.UNINDENT
.sp
The [usermap] section is used to specify mappings of Mercurial
committer ID to Bugzilla user ID. See also [bugzilla].usermap.
"committer"="Bugzilla user"
.sp
Finally, the [web] section supports one entry:
.INDENT 0.0
.TP
.B baseurl
.
Base URL for browsing Mercurial repositories. Reference from
templates as {hgweb}.
.UNINDENT
.sp
Activating the extension:
.sp
.nf
.ft C
[extensions]
bugzilla =

[hooks]
# run bugzilla hook on every change pulled or pushed in here
incoming.bugzilla = python:hgext.bugzilla.hook
.ft P
.fi
.sp
Example configuration:
.sp
This example configuration is for a collection of Mercurial
repositories in /var/local/hg/repos/ used with a local Bugzilla 3.2
installation in /opt/bugzilla\-3.2.
.sp
.nf
.ft C
[bugzilla]
host=localhost
password=XYZZY
version=3.0
bzuser=unknown@domain.com
bzdir=/opt/bugzilla\-3.2
template=Changeset {node|short} in {root|basename}.
         {hgweb}/{webroot}/rev/{node|short}\en
         {desc}\en
strip=5

[web]
baseurl=http://dev.domain.com/hg

[usermap]
user@emaildomain.com=user.name@bugzilladomain.com
.ft P
.fi
.sp
Commits add a comment to the Bugzilla bug record of the form:
.sp
.nf
.ft C
Changeset 3b16791d6642 in repository\-name.
http://dev.domain.com/hg/repository\-name/rev/3b16791d6642

Changeset commit comment. Bug 1234.
.ft P
.fi
.SS children
.sp
command to display child changesets
.SS Commands
.SS children
.sp
.nf
.ft C
hg children [\-r REV] [FILE]
.ft P
.fi
.sp
Print the children of the working directory\(aqs revisions. If a
revision is given via \-r/\-\-rev, the children of that revision will
be printed. If a file argument is given, revision in which the
file was last changed (after the working directory revision or the
argument to \-\-rev if given) is printed.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
show children of the specified revision
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.UNINDENT
.SS churn
.sp
command to display statistics about repository history
.SS Commands
.SS churn
.sp
.nf
.ft C
hg churn [\-d DATE] [\-r REV] [\-\-aliases FILE] [FILE]
.ft P
.fi
.sp
This command will display a histogram representing the number
of changed lines or revisions, grouped according to the given
template. The default template will group changes by author.
The \-\-dateformat option may be used to group the results by
date instead.
.sp
Statistics are based on the number of changed lines, or
alternatively the number of matching revisions if the
\-\-changesets option is specified.
.sp
Examples:
.sp
.nf
.ft C
# display count of changed lines for every committer
hg churn \-t \(aq{author|email}\(aq

# display daily activity graph
hg churn \-f \(aq%H\(aq \-s \-c

# display activity of developers by month
hg churn \-f \(aq%Y\-%m\(aq \-s \-c

# display count of lines changed in every year
hg churn \-f \(aq%Y\(aq \-s
.ft P
.fi
.sp
It is possible to map alternate email addresses to a main address
by providing a file using the following format:
.sp
.nf
.ft C
<alias email> = <actual email>
.ft P
.fi
.sp
Such a file may be specified with the \-\-aliases option, otherwise
a .hgchurn file will be looked for in the working directory root.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
count rate for the specified revision or range
.TP
.B \-d,  \-\-date
.
count rate for revisions matching date spec
.TP
.B \-t,  \-\-template
.
template to group changesets (default: {author|email})
.TP
.B \-f,  \-\-dateformat
.
strftime\-compatible format for grouping by date
.TP
.B \-c,  \-\-changesets
.
count rate by number of changesets
.TP
.B \-s,  \-\-sort
.
sort by key (default: sort by count)
.TP
.B \-\-diffstat
.
display added/removed lines separately
.TP
.B \-\-aliases
.
file with email aliases
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS color
.sp
colorize output from some commands
.sp
This extension modifies the status and resolve commands to add color to their
output to reflect file status, the qseries command to add color to reflect
patch status (applied, unapplied, missing), and to diff\-related
commands to highlight additions, removals, diff headers, and trailing
whitespace.
.sp
Other effects in addition to color, like bold and underlined text, are
also available. Effects are rendered with the ECMA\-48 SGR control
function (aka ANSI escape codes). This module also provides the
render_text function, which can be used to add effects to any text.
.sp
Default effects may be overridden from your configuration file:
.sp
.nf
.ft C
[color]
status.modified = blue bold underline red_background
status.added = green bold
status.removed = red bold blue_background
status.deleted = cyan bold underline
status.unknown = magenta bold underline
status.ignored = black bold

# \(aqnone\(aq turns off all effects
status.clean = none
status.copied = none

qseries.applied = blue bold underline
qseries.unapplied = black bold
qseries.missing = red bold

diff.diffline = bold
diff.extended = cyan bold
diff.file_a = red bold
diff.file_b = green bold
diff.hunk = magenta
diff.deleted = red
diff.inserted = green
diff.changed = white
diff.trailingwhitespace = bold red_background

resolve.unresolved = red bold
resolve.resolved = green bold

bookmarks.current = green

branches.active = none
branches.closed = black bold
branches.current = green
branches.inactive = none
.ft P
.fi
.sp
The color extension will try to detect whether to use ANSI codes or
Win32 console APIs, unless it is made explicit:
.sp
.nf
.ft C
[color]
mode = ansi
.ft P
.fi
.sp
Any value other than \(aqansi\(aq, \(aqwin32\(aq, or \(aqauto\(aq will disable color.
.SS convert
.sp
import revisions from foreign VCS repositories into Mercurial
.SS Commands
.SS convert
.sp
.nf
.ft C
hg convert [OPTION]... SOURCE [DEST [REVMAP]]
.ft P
.fi
.sp
Accepted source formats [identifiers]:
.INDENT 0.0
.IP \(bu 2
.
Mercurial [hg]
.IP \(bu 2
.
CVS [cvs]
.IP \(bu 2
.
Darcs [darcs]
.IP \(bu 2
.
git [git]
.IP \(bu 2
.
Subversion [svn]
.IP \(bu 2
.
Monotone [mtn]
.IP \(bu 2
.
GNU Arch [gnuarch]
.IP \(bu 2
.
Bazaar [bzr]
.IP \(bu 2
.
Perforce [p4]
.UNINDENT
.sp
Accepted destination formats [identifiers]:
.INDENT 0.0
.IP \(bu 2
.
Mercurial [hg]
.IP \(bu 2
.
Subversion [svn] (history on branches is not preserved)
.UNINDENT
.sp
If no revision is given, all revisions will be converted.
Otherwise, convert will only import up to the named revision
(given in a format understood by the source).
.sp
If no destination directory name is specified, it defaults to the
basename of the source with \fB\-hg\fP appended. If the destination
repository doesn\(aqt exist, it will be created.
.sp
By default, all sources except Mercurial will use \-\-branchsort.
Mercurial uses \-\-sourcesort to preserve original revision numbers
order. Sort modes have the following effects:
.INDENT 0.0
.TP
.B \-\-branchsort
.
convert from parent to child revision when possible,
which means branches are usually converted one after
the other. It generates more compact repositories.
.TP
.B \-\-datesort
.
sort revisions by date. Converted repositories have
good\-looking changelogs but are often an order of
magnitude larger than the same ones generated by
\-\-branchsort.
.TP
.B \-\-sourcesort
.
try to preserve source revisions order, only
supported by Mercurial sources.
.UNINDENT
.sp
If \fBREVMAP\fP isn\(aqt given, it will be put in a default location
(\fB<dest>/.hg/shamap\fP by default). The \fBREVMAP\fP is a simple
text file that maps each source commit ID to the destination ID
for that revision, like so:
.sp
.nf
.ft C
<source ID> <destination ID>
.ft P
.fi
.sp
If the file doesn\(aqt exist, it\(aqs automatically created. It\(aqs
updated on each commit copied, so \%\fBhg convert\fP\: can be interrupted
and can be run repeatedly to copy new commits.
.sp
The authormap is a simple text file that maps each source commit
author to a destination commit author. It is handy for source SCMs
that use unix logins to identify authors (eg: CVS). One line per
author mapping and the line format is:
.sp
.nf
.ft C
source author = destination author
.ft P
.fi
.sp
Empty lines and lines starting with a \fB#\fP are ignored.
.sp
The filemap is a file that allows filtering and remapping of files
and directories. Each line can contain one of the following
directives:
.sp
.nf
.ft C
include path/to/file\-or\-dir

exclude path/to/file\-or\-dir

rename path/to/source path/to/destination
.ft P
.fi
.sp
Comment lines start with \fB#\fP. A specified path matches if it
equals the full relative name of a file or one of its parent
directories. The \fBinclude\fP or \fBexclude\fP directive with the
longest matching path applies, so line order does not matter.
.sp
The \fBinclude\fP directive causes a file, or all files under a
directory, to be included in the destination repository, and the
exclusion of all other files and directories not explicitly
included. The \fBexclude\fP directive causes files or directories to
be omitted. The \fBrename\fP directive renames a file or directory if
it is converted. To rename from a subdirectory into the root of
the repository, use \fB.\fP as the path to rename to.
.sp
The splicemap is a file that allows insertion of synthetic
history, letting you specify the parents of a revision. This is
useful if you want to e.g. give a Subversion merge two parents, or
graft two disconnected series of history together. Each entry
contains a key, followed by a space, followed by one or two
comma\-separated values:
.sp
.nf
.ft C
key parent1, parent2
.ft P
.fi
.sp
The key is the revision ID in the source
revision control system whose parents should be modified (same
format as a key in .hg/shamap). The values are the revision IDs
(in either the source or destination revision control system) that
should be used as the new parents for that node. For example, if
you have merged "release\-1.0" into "trunk", then you should
specify the revision on "trunk" as the first parent and the one on
the "release\-1.0" branch as the second.
.sp
The branchmap is a file that allows you to rename a branch when it is
being brought in from whatever external repository. When used in
conjunction with a splicemap, it allows for a powerful combination
to help fix even the most badly mismanaged repositories and turn them
into nicely structured Mercurial repositories. The branchmap contains
lines of the form:
.sp
.nf
.ft C
original_branch_name new_branch_name
.ft P
.fi
.sp
where "original_branch_name" is the name of the branch in the
source repository, and "new_branch_name" is the name of the branch
is the destination repository. No whitespace is allowed in the
branch names. This can be used to (for instance) move code in one
repository from "default" to a named branch.
.SS Mercurial Source
.sp
The Mercurial source recognizes the following configuration
options, which you can set on the command line with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.hg.ignoreerrors
.
ignore integrity errors when reading.
Use it to fix Mercurial repositories with missing revlogs, by
converting from and to Mercurial. Default is False.
.TP
.B convert.hg.saverev
.
store original revision ID in changeset
(forces target IDs to change). It takes and boolean argument
and defaults to False.
.TP
.B convert.hg.startrev
.
convert start revision and its descendants.
It takes a hg revision identifier and defaults to 0.
.UNINDENT
.SS CVS Source
.sp
CVS source will use a sandbox (i.e. a checked\-out copy) from CVS
to indicate the starting point of what will be converted. Direct
access to the repository files is not needed, unless of course the
repository is \fB:local:\fP. The conversion uses the top level
directory in the sandbox to find the CVS repository, and then uses
CVS rlog commands to find files to convert. This means that unless
a filemap is given, all files under the starting directory will be
converted, and that any directory reorganization in the CVS
sandbox is ignored.
.sp
The following options can be used with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.cvsps.cache
.
Set to False to disable remote log caching,
for testing and debugging purposes. Default is True.
.TP
.B convert.cvsps.fuzz
.
Specify the maximum time (in seconds) that is
allowed between commits with identical user and log message in
a single changeset. When very large files were checked in as
part of a changeset then the default may not be long enough.
The default is 60.
.TP
.B convert.cvsps.mergeto
.
Specify a regular expression to which
commit log messages are matched. If a match occurs, then the
conversion process will insert a dummy revision merging the
branch on which this log message occurs to the branch
indicated in the regex. Default is \fB{{mergetobranch
([\-\ew]+)}}\fP
.TP
.B convert.cvsps.mergefrom
.
Specify a regular expression to which
commit log messages are matched. If a match occurs, then the
conversion process will add the most recent revision on the
branch indicated in the regex as the second parent of the
changeset. Default is \fB{{mergefrombranch ([\-\ew]+)}}\fP
.TP
.B hook.cvslog
.
Specify a Python function to be called at the end of
gathering the CVS log. The function is passed a list with the
log entries, and can modify the entries in\-place, or add or
delete them.
.TP
.B hook.cvschangesets
.
Specify a Python function to be called after
the changesets are calculated from the the CVS log. The
function is passed a list with the changeset entries, and can
modify the changesets in\-place, or add or delete them.
.UNINDENT
.sp
An additional "debugcvsps" Mercurial command allows the builtin
changeset merging code to be run without doing a conversion. Its
parameters and output are similar to that of cvsps 2.1. Please see
the command help for more details.
.SS Subversion Source
.sp
Subversion source detects classical trunk/branches/tags layouts.
By default, the supplied \fBsvn://repo/path/\fP source URL is
converted as a single branch. If \fBsvn://repo/path/trunk\fP exists
it replaces the default branch. If \fBsvn://repo/path/branches\fP
exists, its subdirectories are listed as possible branches. If
\fBsvn://repo/path/tags\fP exists, it is looked for tags referencing
converted branches. Default \fBtrunk\fP, \fBbranches\fP and \fBtags\fP
values can be overridden with following options. Set them to paths
relative to the source URL, or leave them blank to disable auto
detection.
.sp
The following options can be set with \fB\-\-config\fP:
.INDENT 0.0
.TP
.B convert.svn.branches
.
specify the directory containing branches.
The default is \fBbranches\fP.
.TP
.B convert.svn.tags
.
specify the directory containing tags. The
default is \fBtags\fP.
.TP
.B convert.svn.trunk
.
specify the name of the trunk branch. The
default is \fBtrunk\fP.
.UNINDENT
.sp
Source history can be retrieved starting at a specific revision,
instead of being integrally converted. Only single branch
conversions are supported.
.INDENT 0.0
.TP
.B convert.svn.startrev
.
specify start Subversion revision number.
The default is 0.
.UNINDENT
.SS Perforce Source
.sp
The Perforce (P4) importer can be given a p4 depot path or a
client specification as source. It will convert all files in the
source to a flat Mercurial repository, ignoring labels, branches
and integrations. Note that when a depot path is given you then
usually should specify a target directory, because otherwise the
target may be named \fB...\-hg\fP.
.sp
It is possible to limit the amount of source history to be
converted by specifying an initial Perforce revision:
.INDENT 0.0
.TP
.B convert.p4.startrev
.
specify initial Perforce revision (a
Perforce changelist number).
.UNINDENT
.SS Mercurial Destination
.sp
The following options are supported:
.INDENT 0.0
.TP
.B convert.hg.clonebranches
.
dispatch source branches in separate
clones. The default is False.
.TP
.B convert.hg.tagsbranch
.
branch name for tag revisions, defaults to
\fBdefault\fP.
.TP
.B convert.hg.usebranchnames
.
preserve branch names. The default is
True.
.UNINDENT
.sp
Options:
.INDENT 0.0
.TP
.B \-\-authors
.
username mapping filename (DEPRECATED, use \-\-authormap instead)
.TP
.B \-s,  \-\-source\-type
.
source repository type
.TP
.B \-d,  \-\-dest\-type
.
destination repository type
.TP
.B \-r,  \-\-rev
.
import up to target revision REV
.TP
.B \-A,  \-\-authormap
.
remap usernames using this file
.TP
.B \-\-filemap
.
remap file names using contents of file
.TP
.B \-\-splicemap
.
splice synthesized history into place
.TP
.B \-\-branchmap
.
change branch names while converting
.TP
.B \-\-branchsort
.
try to sort changesets by branches
.TP
.B \-\-datesort
.
try to sort changesets by date
.TP
.B \-\-sourcesort
.
preserve source changesets order
.UNINDENT
.SS eol
.sp
automatically manage newlines in repository files
.sp
This extension allows you to manage the type of line endings (CRLF or
LF) that are used in the repository and in the local working
directory. That way you can get CRLF line endings on Windows and LF on
Unix/Mac, thereby letting everybody use their OS native line endings.
.sp
The extension reads its configuration from a versioned \fB.hgeol\fP
configuration file found in the root of the working copy. The
\fB.hgeol\fP file use the same syntax as all other Mercurial
configuration files. It uses two sections, \fB[patterns]\fP and
\fB[repository]\fP.
.sp
The \fB[patterns]\fP section specifies how line endings should be
converted between the working copy and the repository. The format is
specified by a file pattern. The first match is used, so put more
specific patterns first. The available line endings are \fBLF\fP,
\fBCRLF\fP, and \fBBIN\fP.
.sp
Files with the declared format of \fBCRLF\fP or \fBLF\fP are always
checked out and stored in the repository in that format and files
declared to be binary (\fBBIN\fP) are left unchanged. Additionally,
\fBnative\fP is an alias for checking out in the platform\(aqs default line
ending: \fBLF\fP on Unix (including Mac OS X) and \fBCRLF\fP on
Windows. Note that \fBBIN\fP (do nothing to line endings) is Mercurial\(aqs
default behaviour; it is only needed if you need to override a later,
more general pattern.
.sp
The optional \fB[repository]\fP section specifies the line endings to
use for files stored in the repository. It has a single setting,
\fBnative\fP, which determines the storage line endings for files
declared as \fBnative\fP in the \fB[patterns]\fP section. It can be set to
\fBLF\fP or \fBCRLF\fP. The default is \fBLF\fP. For example, this means
that on Windows, files configured as \fBnative\fP (\fBCRLF\fP by default)
will be converted to \fBLF\fP when stored in the repository. Files
declared as \fBLF\fP, \fBCRLF\fP, or \fBBIN\fP in the \fB[patterns]\fP section
are always stored as\-is in the repository.
.sp
Example versioned \fB.hgeol\fP file:
.sp
.nf
.ft C
[patterns]
**.py = native
**.vcproj = CRLF
**.txt = native
Makefile = LF
**.jpg = BIN

[repository]
native = LF
.ft P
.fi
.IP Note
.
The rules will first apply when files are touched in the working
copy, e.g. by updating to null and back to tip to touch all files.
.RE
.sp
The extension uses an optional \fB[eol]\fP section in your hgrc file
(not the \fB.hgeol\fP file) for settings that control the overall
behavior. There are two settings:
.INDENT 0.0
.IP \(bu 2
.
\fBeol.native\fP (default \fBos.linesep\fP) can be set to \fBLF\fP or
\fBCRLF\fP to override the default interpretation of \fBnative\fP for
checkout. This can be used with \%\fBhg archive\fP\: on Unix, say, to
generate an archive where files have line endings for Windows.
.IP \(bu 2
.
\fBeol.only\-consistent\fP (default True) can be set to False to make
the extension convert files with inconsistent EOLs. Inconsistent
means that there is both \fBCRLF\fP and \fBLF\fP present in the file.
Such files are normally not touched under the assumption that they
have mixed EOLs on purpose.
.UNINDENT
.sp
The extension provides \fBcleverencode:\fP and \fBcleverdecode:\fP filters
like the deprecated win32text extension does. This means that you can
disable win32text and enable eol and your filters will still work. You
only need to these filters until you have prepared a \fB.hgeol\fP file.
.sp
The \fBwin32text.forbid*\fP hooks provided by the win32text extension
have been unified into a single hook named \fBeol.hook\fP. The hook will
lookup the expected line endings from the \fB.hgeol\fP file, which means
you must migrate to a \fB.hgeol\fP file first before using the hook.
Remember to enable the eol extension in the repository where you
install the hook.
.sp
See \%\fBhg help patterns\fP\: for more information about the glob patterns
used.
.SS extdiff
.sp
command to allow external programs to compare revisions
.sp
The extdiff Mercurial extension allows you to use external programs
to compare revisions, or revision with working directory. The external
diff programs are called with a configurable set of options and two
non\-option arguments: paths to directories containing snapshots of
files to compare.
.sp
The extdiff extension also allows to configure new diff commands, so
you do not need to type \%\fBhg extdiff \-p kdiff3\fP\: always.
.sp
.nf
.ft C
[extdiff]
# add new command that runs GNU diff(1) in \(aqcontext diff\(aq mode
cdiff = gdiff \-Nprc5
## or the old way:
#cmd.cdiff = gdiff
#opts.cdiff = \-Nprc5

# add new command called vdiff, runs kdiff3
vdiff = kdiff3

# add new command called meld, runs meld (no need to name twice)
meld =

# add new command called vimdiff, runs gvimdiff with DirDiff plugin
# (see http://www.vim.org/scripts/script.php?script_id=102) Non
# English user, be sure to put "let g:DirDiffDynamicDiffText = 1" in
# your .vimrc
vimdiff = gvim \-f \(aq+next\(aq \(aq+execute "DirDiff" argv(0) argv(1)\(aq
.ft P
.fi
.sp
Tool arguments can include variables that are expanded at runtime:
.sp
.nf
.ft C
$parent1, $plabel1 \- filename, descriptive label of first parent
$child,   $clabel  \- filename, descriptive label of child revision
$parent2, $plabel2 \- filename, descriptive label of second parent
$parent is an alias for $parent1.
.ft P
.fi
.sp
The extdiff extension will look in your [diff\-tools] and [merge\-tools]
sections for diff tool arguments, when none are specified in [extdiff].
.sp
.nf
.ft C
[extdiff]
kdiff3 =

[diff\-tools]
kdiff3.diffargs=\-\-L1 \(aq$plabel1\(aq \-\-L2 \(aq$clabel\(aq $parent $child
.ft P
.fi
.sp
You can use \-I/\-X and list of file or directory names like normal
\%\fBhg diff\fP\: command. The extdiff extension makes snapshots of only
needed files, so running the external diff program will actually be
pretty fast (at least faster than having to compare the entire tree).
.SS Commands
.SS extdiff
.sp
.nf
.ft C
hg extdiff [OPT]... [FILE]...
.ft P
.fi
.sp
Show differences between revisions for the specified files, using
an external program. The default program used is diff, with
default options "\-Npru".
.sp
To select a different program, use the \-p/\-\-program option. The
program will be passed the names of two directories to compare. To
pass additional options to the program, use \-o/\-\-option. These
will be passed before the names of the directories to compare.
.sp
When two revision arguments are given, then changes are shown
between those revisions. If only one revision is specified then
that revision is compared to the working directory, and, when no
revisions are specified, the working directory files are compared
to its parent.
.sp
Options:
.INDENT 0.0
.TP
.B \-p,  \-\-program
.
comparison program to run
.TP
.B \-o,  \-\-option
.
pass option to comparison program
.TP
.B \-r,  \-\-rev
.
revision
.TP
.B \-c,  \-\-change
.
change made by revision
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS fetch
.sp
pull, update and merge in one command
.SS Commands
.SS fetch
.sp
.nf
.ft C
hg fetch [SOURCE]
.ft P
.fi
.sp
This finds all changes from the repository at the specified path
or URL and adds them to the local repository.
.sp
If the pulled changes add a new branch head, the head is
automatically merged, and the result of the merge is committed.
Otherwise, the working directory is updated to include the new
changes.
.sp
When a merge occurs, the newly pulled changes are assumed to be
"authoritative". The head of the new changes is used as the first
parent, with local changes as the second. To switch the merge
order, use \-\-switch\-parent.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-r,  \-\-rev
.
a specific revision you would like to pull
.TP
.B \-e,  \-\-edit
.
edit commit message
.TP
.B \-\-force\-editor
.
edit commit message (DEPRECATED)
.TP
.B \-\-switch\-parent
.
switch parents when merging
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS gpg
.sp
commands to sign and verify changesets
.SS Commands
.SS sigcheck
.sp
.nf
.ft C
hg sigcheck REVISION
.ft P
.fi
.sp
verify all the signatures there may be for a particular revision
.SS sign
.sp
.nf
.ft C
hg sign [OPTION]... [REVISION]...
.ft P
.fi
.sp
If no revision is given, the parent of the working directory is used,
or tip if no revision is checked out.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-local
.
make the signature local
.TP
.B \-f,  \-\-force
.
sign even if the sigfile is modified
.TP
.B \-\-no\-commit
.
do not commit the sigfile after signing
.TP
.B \-k,  \-\-key
.
the key id to sign with
.TP
.B \-m,  \-\-message
.
commit message
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.UNINDENT
.SS sigs
.sp
.nf
.ft C
hg sigs
.ft P
.fi
.sp
list signed changesets
.SS graphlog
.sp
command to view revision graphs from a shell
.sp
This extension adds a \-\-graph option to the incoming, outgoing and log
commands. When this options is given, an ASCII representation of the
revision graph is also shown.
.SS Commands
.SS glog
.sp
.nf
.ft C
hg glog [OPTION]... [FILE]
.ft P
.fi
.sp
Print a revision history alongside a revision graph drawn with
ASCII characters.
.sp
Nodes printed as an @ character are parents of the working
directory.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-limit
.
limit number of changes displayed
.TP
.B \-p,  \-\-patch
.
show patch
.TP
.B \-r,  \-\-rev
.
show the specified revision or range
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.UNINDENT
.SS hgcia
.sp
hooks for integrating with the CIA.vc notification service
.sp
This is meant to be run as a changegroup or incoming hook. To
configure it, set the following options in your hgrc:
.sp
.nf
.ft C
[cia]
# your registered CIA user name
user = foo
# the name of the project in CIA
project = foo
# the module (subproject) (optional)
#module = foo
# Append a diffstat to the log message (optional)
#diffstat = False
# Template to use for log messages (optional)
#template = {desc}\en{baseurl}/rev/{node}\-\- {diffstat}
# Style to use (optional)
#style = foo
# The URL of the CIA notification service (optional)
# You can use mailto: URLs to send by email, eg
# mailto:cia@cia.vc
# Make sure to set email.from if you do this.
#url = http://cia.vc/
# print message instead of sending it (optional)
#test = False

[hooks]
# one of these:
changegroup.cia = python:hgcia.hook
#incoming.cia = python:hgcia.hook

[web]
# If you want hyperlinks (optional)
baseurl = http://server/path/to/repo
.ft P
.fi
.SS hgk
.sp
browse the repository in a graphical way
.sp
The hgk extension allows browsing the history of a repository in a
graphical way. It requires Tcl/Tk version 8.4 or later. (Tcl/Tk is not
distributed with Mercurial.)
.sp
hgk consists of two parts: a Tcl script that does the displaying and
querying of information, and an extension to Mercurial named hgk.py,
which provides hooks for hgk to get information. hgk can be found in
the contrib directory, and the extension is shipped in the hgext
repository, and needs to be enabled.
.sp
The \%\fBhg view\fP\: command will launch the hgk Tcl script. For this command
to work, hgk must be in your search path. Alternately, you can specify
the path to hgk in your configuration file:
.sp
.nf
.ft C
[hgk]
path=/location/of/hgk
.ft P
.fi
.sp
hgk can make use of the extdiff extension to visualize revisions.
Assuming you had already configured extdiff vdiff command, just add:
.sp
.nf
.ft C
[hgk]
vdiff=vdiff
.ft P
.fi
.sp
Revisions context menu will now display additional entries to fire
vdiff on hovered and selected revisions.
.SS Commands
.SS view
.sp
.nf
.ft C
hg view [\-l LIMIT] [REVRANGE]
.ft P
.fi
.sp
start interactive history viewer
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-limit
.
limit number of changes displayed
.UNINDENT
.SS highlight
.sp
syntax highlighting for hgweb (requires Pygments)
.sp
It depends on the Pygments syntax highlighting library:
\%http://pygments.org/\:
.sp
There is a single configuration option:
.sp
.nf
.ft C
[web]
pygments_style = <style>
.ft P
.fi
.sp
The default is \(aqcolorful\(aq.
.SS inotify
.sp
accelerate status report using Linux\(aqs inotify service
.SS Commands
.SS inserve
.sp
.nf
.ft C
hg inserve [OPTION]...
.ft P
.fi
.sp
start an inotify server for this repository
.sp
Options:
.INDENT 0.0
.TP
.B \-d,  \-\-daemon
.
run server in background
.TP
.B \-\-daemon\-pipefds
.
used internally by daemon mode
.TP
.B \-t,  \-\-idle\-timeout
.
minutes to sit idle before exiting
.TP
.B \-\-pid\-file
.
name of file to write process ID to
.UNINDENT
.SS interhg
.sp
expand expressions into changelog and summaries
.sp
This extension allows the use of a special syntax in summaries, which
will be automatically expanded into links or any other arbitrary
expression, much like InterWiki does.
.sp
A few example patterns (link to bug tracking, etc.) that may be used
in your hgrc:
.sp
.nf
.ft C
[interhg]
issues = s!issue(\ed+)!<a href="http://bts/issue\e1">issue\e1</a>!
bugzilla = s!((?:bug|b=|(?=#?\ed{4,}))(?:\es*#?)(\ed+))!<a..=\e2">\e1</a>!i
boldify = s!(^|\es)#(\ed+)\eb! <b>#\e2</b>!
.ft P
.fi
.SS keyword
.sp
expand keywords in tracked files
.sp
This extension expands RCS/CVS\-like or self\-customized $Keywords$ in
tracked text files selected by your configuration.
.sp
Keywords are only expanded in local repositories and not stored in the
change history. The mechanism can be regarded as a convenience for the
current user or for archive distribution.
.sp
Keywords expand to the changeset data pertaining to the latest change
relative to the working directory parent of each file.
.sp
Configuration is done in the [keyword], [keywordset] and [keywordmaps]
sections of hgrc files.
.sp
Example:
.sp
.nf
.ft C
[keyword]
# expand keywords in every python file except those matching "x*"
**.py =
x*    = ignore

[keywordset]
# prefer svn\- over cvs\-like default keywordmaps
svn = True
.ft P
.fi
.IP Note
.
The more specific you are in your filename patterns the less you
lose speed in huge repositories.
.RE
.sp
For [keywordmaps] template mapping and expansion demonstration and
control run \%\fBhg kwdemo\fP\:. See \%\fBhg help templates\fP\: for a list of
available templates and filters.
.sp
Three additional date template filters are provided:
.sp
.nf
.ft C
utcdate      "2006/09/18 15:13:13"
svnutcdate   "2006\-09\-18 15:13:13Z"
svnisodate   "2006\-09\-18 08:13:13 \-700 (Mon, 18 Sep 2006)"
.ft P
.fi
.sp
The default template mappings (view with \%\fBhg kwdemo \-d\fP\:) can be
replaced with customized keywords and templates. Again, run
\%\fBhg kwdemo\fP\: to control the results of your configuration changes.
.sp
Before changing/disabling active keywords, you must run \%\fBhg kwshrink\fP\:
to avoid storing expanded keywords in the change history.
.sp
To force expansion after enabling it, or a configuration change, run
\%\fBhg kwexpand\fP\:.
.sp
Expansions spanning more than one line and incremental expansions,
like CVS\(aq $Log$, are not supported. A keyword template map "Log =
{desc}" expands to the first line of the changeset description.
.SS Commands
.SS kwdemo
.sp
.nf
.ft C
hg kwdemo [\-d] [\-f RCFILE] [TEMPLATEMAP]...
.ft P
.fi
.sp
Show current, custom, or default keyword template maps and their
expansions.
.sp
Extend the current configuration by specifying maps as arguments
and using \-f/\-\-rcfile to source an external hgrc file.
.sp
Use \-d/\-\-default to disable current configuration.
.sp
See \%\fBhg help templates\fP\: for information on templates and filters.
.sp
Options:
.INDENT 0.0
.TP
.B \-d,  \-\-default
.
show default keyword template maps
.TP
.B \-f,  \-\-rcfile
.
read maps from rcfile
.UNINDENT
.SS kwexpand
.sp
.nf
.ft C
hg kwexpand [OPTION]... [FILE]...
.ft P
.fi
.sp
Run after (re)enabling keyword expansion.
.sp
kwexpand refuses to run if given files contain local changes.
.sp
Options:
.INDENT 0.0
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS kwfiles
.sp
.nf
.ft C
hg kwfiles [OPTION]... [FILE]...
.ft P
.fi
.sp
List which files in the working directory are matched by the
[keyword] configuration patterns.
.sp
Useful to prevent inadvertent keyword expansion and to speed up
execution by including only files that are actual candidates for
expansion.
.sp
See \%\fBhg help keyword\fP\: on how to construct patterns both for
inclusion and exclusion of files.
.sp
With \-A/\-\-all and \-v/\-\-verbose the codes used to show the status
of files are:
.sp
.nf
.ft C
K = keyword expansion candidate
k = keyword expansion candidate (not tracked)
I = ignored
i = ignored (not tracked)
.ft P
.fi
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-all
.
show keyword status flags of all files
.TP
.B \-i,  \-\-ignore
.
show files excluded from expansion
.TP
.B \-u,  \-\-unknown
.
only show unknown (not tracked) files
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS kwshrink
.sp
.nf
.ft C
hg kwshrink [OPTION]... [FILE]...
.ft P
.fi
.sp
Must be run before changing/disabling active keywords.
.sp
kwshrink refuses to run if given files contain local changes.
.sp
Options:
.INDENT 0.0
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS mq
.sp
manage a stack of patches
.sp
This extension lets you work with a stack of patches in a Mercurial
repository. It manages two stacks of patches \- all known patches, and
applied patches (subset of known patches).
.sp
Known patches are represented as patch files in the .hg/patches
directory. Applied patches are both patch files and changesets.
.sp
Common tasks (use \%\fBhg help command\fP\: for more details):
.sp
.nf
.ft C
create new patch                          qnew
import existing patch                     qimport

print patch series                        qseries
print applied patches                     qapplied

add known patch to applied stack          qpush
remove patch from applied stack           qpop
refresh contents of top applied patch     qrefresh
.ft P
.fi
.sp
By default, mq will automatically use git patches when required to
avoid losing file mode changes, copy records, binary files or empty
files creations or deletions. This behaviour can be configured with:
.sp
.nf
.ft C
[mq]
git = auto/keep/yes/no
.ft P
.fi
.sp
If set to \(aqkeep\(aq, mq will obey the [diff] section configuration while
preserving existing git patches upon qrefresh. If set to \(aqyes\(aq or
\(aqno\(aq, mq will override the [diff] section and always generate git or
regular patches, possibly losing data in the second case.
.sp
You will by default be managing a patch queue named "patches". You can
create other, independent patch queues with the \%\fBhg qqueue\fP\: command.
.SS Commands
.SS qapplied
.sp
.nf
.ft C
hg qapplied [\-1] [\-s] [PATCH]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-1,  \-\-last
.
show only the last patch
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qclone
.sp
.nf
.ft C
hg qclone [OPTION]... SOURCE [DEST]
.ft P
.fi
.sp
If source is local, destination will have no patches applied. If
source is remote, this command can not check if patches are
applied in source, so cannot guarantee that patches are not
applied in destination. If you clone remote repository, be sure
before that it has no patches applied.
.sp
Source patch repository is looked for in <src>/.hg/patches by
default. Use \-p <url> to change.
.sp
The patch directory must be a nested Mercurial repository, as
would be created by \%\fBhg init \-\-mq\fP\:.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-\-pull
.
use pull protocol to copy metadata
.TP
.B \-U,  \-\-noupdate
.
do not update the new working directories
.TP
.B \-\-uncompressed
.
use uncompressed transfer (fast over LAN)
.TP
.B \-p,  \-\-patches
.
location of source patch repository
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS qcommit
.sp
.nf
.ft C
hg qcommit [OPTION]... [FILE]...
.ft P
.fi
.sp
This command is deprecated; use \%\fBhg commit \-\-mq\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-\-close\-branch
.
mark a branch as closed, hiding it from the branch list
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.sp
aliases: qci
.UNINDENT
.SS qdelete
.sp
.nf
.ft C
hg qdelete [\-k] [PATCH]...
.ft P
.fi
.sp
The patches must not be applied, and at least one patch is required. With
\-k/\-\-keep, the patch files are preserved in the patch directory.
.sp
To stop managing a patch and move it into permanent history,
use the \%\fBhg qfinish\fP\: command.
.sp
Options:
.INDENT 0.0
.TP
.B \-k,  \-\-keep
.
keep patch file
.TP
.B \-r,  \-\-rev
.
stop managing a revision (DEPRECATED)
.sp
aliases: qremove qrm
.UNINDENT
.SS qdiff
.sp
.nf
.ft C
hg qdiff [OPTION]... [FILE]...
.ft P
.fi
.sp
Shows a diff which includes the current patch as well as any
changes which have been made in the working directory since the
last refresh (thus showing what the current patch would become
after a qrefresh).
.sp
Use \%\fBhg diff\fP\: if you only want to see the changes made since the
last qrefresh, or \%\fBhg export qtip\fP\: if you want to see changes
made by the current patch without including changes made since the
qrefresh.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-text
.
treat all files as text
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-nodates
.
omit dates from diff headers
.TP
.B \-p,  \-\-show\-function
.
show which function each change is in
.TP
.B \-\-reverse
.
produce a diff that undoes the changes
.TP
.B \-w,  \-\-ignore\-all\-space
.
ignore white space when comparing lines
.TP
.B \-b,  \-\-ignore\-space\-change
.
ignore changes in the amount of white space
.TP
.B \-B,  \-\-ignore\-blank\-lines
.
ignore changes whose lines are all blank
.TP
.B \-U,  \-\-unified
.
number of lines of context to show
.TP
.B \-\-stat
.
output diffstat\-style summary of changes
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.UNINDENT
.SS qfinish
.sp
.nf
.ft C
hg qfinish [\-a] [REV]...
.ft P
.fi
.sp
Finishes the specified revisions (corresponding to applied
patches) by moving them out of mq control into regular repository
history.
.sp
Accepts a revision range or the \-a/\-\-applied option. If \-\-applied
is specified, all applied mq revisions are removed from mq
control. Otherwise, the given revisions must be at the base of the
stack of applied patches.
.sp
This can be especially useful if your changes have been applied to
an upstream repository, or if you are about to push your changes
to upstream.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-applied
.
finish all applied changesets
.UNINDENT
.SS qfold
.sp
.nf
.ft C
hg qfold [\-e] [\-k] [\-m TEXT] [\-l FILE] PATCH...
.ft P
.fi
.sp
Patches must not yet be applied. Each patch will be successively
applied to the current patch in the order given. If all the
patches apply successfully, the current patch will be refreshed
with the new cumulative patch, and the folded patches will be
deleted. With \-k/\-\-keep, the folded patch files will not be
removed afterwards.
.sp
The header for each folded patch will be concatenated with the
current patch header, separated by a line of \fB* * *\fP.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-edit
.
edit patch header
.TP
.B \-k,  \-\-keep
.
keep folded patch files
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.UNINDENT
.SS qgoto
.sp
.nf
.ft C
hg qgoto [OPTION]... PATCH
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
overwrite any local changes
.UNINDENT
.SS qguard
.sp
.nf
.ft C
hg qguard [\-l] [\-n] [PATCH] [\-\- [+GUARD]... [\-GUARD]...]
.ft P
.fi
.sp
Guards control whether a patch can be pushed. A patch with no
guards is always pushed. A patch with a positive guard ("+foo") is
pushed only if the \%\fBhg qselect\fP\: command has activated it. A patch with
a negative guard ("\-foo") is never pushed if the \%\fBhg qselect\fP\: command
has activated it.
.sp
With no arguments, print the currently active guards.
With arguments, set guards for the named patch.
.IP Note
.
Specifying negative guards now requires \(aq\-\-\(aq.
.RE
.sp
To set guards on another patch:
.sp
.nf
.ft C
hg qguard other.patch \-\- +2.6.17 \-stable
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-list
.
list all patches and guards
.TP
.B \-n,  \-\-none
.
drop all guards
.UNINDENT
.SS qheader
.sp
.nf
.ft C
hg qheader [PATCH]
.ft P
.fi
.sp
Returns 0 on success.
.SS qimport
.sp
.nf
.ft C
hg qimport [\-e] [\-n NAME] [\-f] [\-g] [\-P] [\-r REV]... FILE...
.ft P
.fi
.sp
The patch is inserted into the series after the last applied
patch. If no patches have been applied, qimport prepends the patch
to the series.
.sp
The patch will have the same name as its source file unless you
give it a new one with \-n/\-\-name.
.sp
You can register an existing patch inside the patch directory with
the \-e/\-\-existing flag.
.sp
With \-f/\-\-force, an existing patch of the same name will be
overwritten.
.sp
An existing changeset may be placed under mq control with \-r/\-\-rev
(e.g. qimport \-\-rev tip \-n patch will place tip under mq control).
With \-g/\-\-git, patches imported with \-\-rev will use the git diff
format. See the diffs help topic for information on why this is
important for preserving rename/copy information and permission
changes.
.sp
To import a patch from standard input, pass \- as the patch file.
When importing from standard input, a patch name must be specified
using the \-\-name flag.
.sp
To import an existing patch while renaming it:
.sp
.nf
.ft C
hg qimport \-e existing\-patch \-n new\-name
.ft P
.fi
.sp
Returns 0 if import succeeded.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-existing
.
import file in patch directory
.TP
.B \-n,  \-\-name
.
name of patch file
.TP
.B \-f,  \-\-force
.
overwrite existing files
.TP
.B \-r,  \-\-rev
.
place existing revisions under mq control
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-P,  \-\-push
.
qpush after importing
.UNINDENT
.SS qinit
.sp
.nf
.ft C
hg qinit [\-c]
.ft P
.fi
.sp
The queue repository is unversioned by default. If
\-c/\-\-create\-repo is specified, qinit will create a separate nested
repository for patches (qinit \-c may also be run later to convert
an unversioned patch repository into a versioned one). You can use
qcommit to commit changes to this queue repository.
.sp
This command is deprecated. Without \-c, it\(aqs implied by other relevant
commands. With \-c, use \%\fBhg init \-\-mq\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-c,  \-\-create\-repo
.
create queue repository
.UNINDENT
.SS qnew
.sp
.nf
.ft C
hg qnew [\-e] [\-m TEXT] [\-l FILE] PATCH [FILE]...
.ft P
.fi
.sp
qnew creates a new patch on top of the currently\-applied patch (if
any). The patch will be initialized with any outstanding changes
in the working directory. You may also use \-I/\-\-include,
\-X/\-\-exclude, and/or a list of files after the patch name to add
only changes to matching files to the new patch, leaving the rest
as uncommitted modifications.
.sp
\-u/\-\-user and \-d/\-\-date can be used to set the (given) user and
date, respectively. \-U/\-\-currentuser and \-D/\-\-currentdate set user
to current user and date to current date.
.sp
\-e/\-\-edit, \-m/\-\-message or \-l/\-\-logfile set the patch header as
well as the commit message. If none is specified, the header is
empty and the commit message is \(aq[mq]: PATCH\(aq.
.sp
Use the \-g/\-\-git option to keep the patch in the git extended diff
format. Read the diffs help topic for more information on why this
is important for preserving permission changes and copy/rename
information.
.sp
Returns 0 on successful creation of a new patch.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-edit
.
edit commit message
.TP
.B \-f,  \-\-force
.
import uncommitted changes (DEPRECATED)
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-U,  \-\-currentuser
.
add "From: <current user>" to patch
.TP
.B \-u,  \-\-user
.
add "From: <USER>" to patch
.TP
.B \-D,  \-\-currentdate
.
add "Date: <current date>" to patch
.TP
.B \-d,  \-\-date
.
add "Date: <DATE>" to patch
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.UNINDENT
.SS qnext
.sp
.nf
.ft C
hg qnext [\-s]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qpop
.sp
.nf
.ft C
hg qpop [\-a] [\-f] [PATCH | INDEX]
.ft P
.fi
.sp
By default, pops off the top of the patch stack. If given a patch
name, keeps popping off patches until the named patch is at the
top of the stack.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-all
.
pop all patches
.TP
.B \-n,  \-\-name
.
queue name to pop (DEPRECATED)
.TP
.B \-f,  \-\-force
.
forget any local changes to patched files
.UNINDENT
.SS qprev
.sp
.nf
.ft C
hg qprev [\-s]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qpush
.sp
.nf
.ft C
hg qpush [\-f] [\-l] [\-a] [\-\-move] [PATCH | INDEX]
.ft P
.fi
.sp
When \-f/\-\-force is applied, all local changes in patched files
will be lost.
.sp
Return 0 on succces.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
apply on top of local changes
.TP
.B \-e,  \-\-exact
.
apply the target patch to its recorded parent
.TP
.B \-l,  \-\-list
.
list patch name in commit text
.TP
.B \-a,  \-\-all
.
apply all patches
.TP
.B \-m,  \-\-merge
.
merge from another queue (DEPRECATED)
.TP
.B \-n,  \-\-name
.
merge queue name (DEPRECATED)
.TP
.B \-\-move
.
reorder patch series and apply only the patch
.UNINDENT
.SS qqueue
.sp
.nf
.ft C
hg qqueue [OPTION] [QUEUE]
.ft P
.fi
.sp
Supports switching between different patch queues, as well as creating
new patch queues and deleting existing ones.
.sp
Omitting a queue name or specifying \-l/\-\-list will show you the registered
queues \- by default the "normal" patches queue is registered. The currently
active queue will be marked with "(active)".
.sp
To create a new queue, use \-c/\-\-create. The queue is automatically made
active, except in the case where there are applied patches from the
currently active queue in the repository. Then the queue will only be
created and switching will fail.
.sp
To delete an existing queue, use \-\-delete. You cannot delete the currently
active queue.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-l,  \-\-list
.
list all available queues
.TP
.B \-c,  \-\-create
.
create new queue
.TP
.B \-\-rename
.
rename active queue
.TP
.B \-\-delete
.
delete reference to queue
.TP
.B \-\-purge
.
delete queue, and remove patch dir
.UNINDENT
.SS qrefresh
.sp
.nf
.ft C
hg qrefresh [\-I] [\-X] [\-e] [\-m TEXT] [\-l FILE] [\-s] [FILE]...
.ft P
.fi
.sp
If any file patterns are provided, the refreshed patch will
contain only the modifications that match those patterns; the
remaining modifications will remain in the working directory.
.sp
If \-s/\-\-short is specified, files currently included in the patch
will be refreshed just like matched files and remain in the patch.
.sp
If \-e/\-\-edit is specified, Mercurial will start your configured editor for
you to enter a message. In case qrefresh fails, you will find a backup of
your message in \fB.hg/last\-message.txt\fP.
.sp
hg add/remove/copy/rename work as usual, though you might want to
use git\-style patches (\-g/\-\-git or [diff] git=1) to track copies
and renames. See the diffs help topic for more information on the
git diff format.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-e,  \-\-edit
.
edit commit message
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-s,  \-\-short
.
refresh only files already in the patch and specified files
.TP
.B \-U,  \-\-currentuser
.
add/update author field in patch with current user
.TP
.B \-u,  \-\-user
.
add/update author field in patch with given user
.TP
.B \-D,  \-\-currentdate
.
add/update date field in patch with current date
.TP
.B \-d,  \-\-date
.
add/update date field in patch with given date
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.UNINDENT
.SS qrename
.sp
.nf
.ft C
hg qrename PATCH1 [PATCH2]
.ft P
.fi
.sp
With one argument, renames the current patch to PATCH1.
With two arguments, renames PATCH1 to PATCH2.
.sp
Returns 0 on success.
.INDENT 0.0
.INDENT 3.5
.sp
aliases: qmv
.UNINDENT
.UNINDENT
.SS qrestore
.sp
.nf
.ft C
hg qrestore [\-d] [\-u] REV
.ft P
.fi
.sp
This command is deprecated, use \%\fBhg rebase\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-d,  \-\-delete
.
delete save entry
.TP
.B \-u,  \-\-update
.
update queue working directory
.UNINDENT
.SS qsave
.sp
.nf
.ft C
hg qsave [\-m TEXT] [\-l FILE] [\-c] [\-n NAME] [\-e] [\-f]
.ft P
.fi
.sp
This command is deprecated, use \%\fBhg rebase\fP\: instead.
.sp
Options:
.INDENT 0.0
.TP
.B \-c,  \-\-copy
.
copy patch directory
.TP
.B \-n,  \-\-name
.
copy directory name
.TP
.B \-e,  \-\-empty
.
clear queue status file
.TP
.B \-f,  \-\-force
.
force copy
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.UNINDENT
.SS qselect
.sp
.nf
.ft C
hg qselect [OPTION]... [GUARD]...
.ft P
.fi
.sp
Use the \%\fBhg qguard\fP\: command to set or print guards on patch, then use
qselect to tell mq which guards to use. A patch will be pushed if
it has no guards or any positive guards match the currently
selected guard, but will not be pushed if any negative guards
match the current guard. For example:
.sp
.nf
.ft C
qguard foo.patch \-stable    (negative guard)
qguard bar.patch +stable    (positive guard)
qselect stable
.ft P
.fi
.sp
This activates the "stable" guard. mq will skip foo.patch (because
it has a negative match) but push bar.patch (because it has a
positive match).
.sp
With no arguments, prints the currently active guards.
With one argument, sets the active guard.
.sp
Use \-n/\-\-none to deactivate guards (no other arguments needed).
When no guards are active, patches with positive guards are
skipped and patches with negative guards are pushed.
.sp
qselect can change the guards on applied patches. It does not pop
guarded patches by default. Use \-\-pop to pop back to the last
applied patch that is not guarded. Use \-\-reapply (which implies
\-\-pop) to push back to the current patch afterwards, but skip
guarded patches.
.sp
Use \-s/\-\-series to print a list of all guards in the series file
(no other arguments needed). Use \-v for more information.
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-n,  \-\-none
.
disable all guards
.TP
.B \-s,  \-\-series
.
list all guards in series file
.TP
.B \-\-pop
.
pop to before first guarded applied patch
.TP
.B \-\-reapply
.
pop, then reapply patches
.UNINDENT
.SS qseries
.sp
.nf
.ft C
hg qseries [\-ms]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-m,  \-\-missing
.
print patches not in series
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qtop
.sp
.nf
.ft C
hg qtop [\-s]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS qunapplied
.sp
.nf
.ft C
hg qunapplied [\-1] [\-s] [PATCH]
.ft P
.fi
.sp
Returns 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-1,  \-\-first
.
show only the first patch
.TP
.B \-s,  \-\-summary
.
print first line of patch header
.UNINDENT
.SS strip
.sp
.nf
.ft C
hg strip [\-k] [\-f] [\-n] REV...
.ft P
.fi
.sp
The strip command removes the specified changesets and all their
descendants. If the working directory has uncommitted changes,
the operation is aborted unless the \-\-force flag is supplied.
.sp
If a parent of the working directory is stripped, then the working
directory will automatically be updated to the most recent
available ancestor of the stripped parent after the operation
completes.
.sp
Any stripped changesets are stored in \fB.hg/strip\-backup\fP as a
bundle (see \%\fBhg help bundle\fP\: and \%\fBhg help unbundle\fP\:). They can
be restored by running \%\fBhg unbundle .hg/strip\-backup/BUNDLE\fP\:,
where BUNDLE is the bundle file created by the strip. Note that
the local revision numbers will in general be different after the
restore.
.sp
Use the \-\-no\-backup option to discard the backup bundle once the
operation completes.
.sp
Return 0 on success.
.sp
Options:
.INDENT 0.0
.TP
.B \-f,  \-\-force
.
force removal of changesets even if the working directory has uncommitted changes
.TP
.B \-b,  \-\-backup
.
bundle only changesets with local revision number greater than REV which are not descendants of REV (DEPRECATED)
.TP
.B \-n,  \-\-no\-backup
.
no backups
.TP
.B \-\-nobackup
.
no backups (DEPRECATED)
.TP
.B \-k,  \-\-keep
.
do not modify working copy during strip
.UNINDENT
.SS notify
.sp
hooks for sending email notifications at commit/push time
.sp
Subscriptions can be managed through a hgrc file. Default mode is to
print messages to stdout, for testing and configuring.
.sp
To use, configure the notify extension and enable it in hgrc like
this:
.sp
.nf
.ft C
[extensions]
notify =

[hooks]
# one email for each incoming changeset
incoming.notify = python:hgext.notify.hook
# batch emails when many changesets incoming at one time
changegroup.notify = python:hgext.notify.hook

[notify]
# config items go here
.ft P
.fi
.sp
Required configuration items:
.sp
.nf
.ft C
config = /path/to/file # file containing subscriptions
.ft P
.fi
.sp
Optional configuration items:
.sp
.nf
.ft C
test = True            # print messages to stdout for testing
strip = 3              # number of slashes to strip for url paths
domain = example.com   # domain to use if committer missing domain
style = ...            # style file to use when formatting email
template = ...         # template to use when formatting email
incoming = ...         # template to use when run as incoming hook
changegroup = ...      # template when run as changegroup hook
maxdiff = 300          # max lines of diffs to include (0=none, \-1=all)
maxsubject = 67        # truncate subject line longer than this
diffstat = True        # add a diffstat before the diff content
sources = serve        # notify if source of incoming changes in this list
                       # (serve == ssh or http, push, pull, bundle)
merge = False          # send notification for merges (default True)
[email]
from = user@host.com   # email address to send as if none given
[web]
baseurl = http://hgserver/... # root of hg web site for browsing commits
.ft P
.fi
.sp
The notify config file has same format as a regular hgrc file. It has
two sections so you can express subscriptions in whatever way is
handier for you.
.sp
.nf
.ft C
[usersubs]
# key is subscriber email, value is ","\-separated list of glob patterns
user@host = pattern

[reposubs]
# key is glob pattern, value is ","\-separated list of subscriber emails
pattern = user@host
.ft P
.fi
.sp
Glob patterns are matched against path to repository root.
.sp
If you like, you can put notify config file in repository that users
can push changes to, they can manage their own subscriptions.
.SS pager
.sp
browse command output with an external pager
.sp
To set the pager that should be used, set the application variable:
.sp
.nf
.ft C
[pager]
pager = less \-FRSX
.ft P
.fi
.sp
If no pager is set, the pager extensions uses the environment variable
$PAGER. If neither pager.pager, nor $PAGER is set, no pager is used.
.sp
If you notice "BROKEN PIPE" error messages, you can disable them by
setting:
.sp
.nf
.ft C
[pager]
quiet = True
.ft P
.fi
.sp
You can disable the pager for certain commands by adding them to the
pager.ignore list:
.sp
.nf
.ft C
[pager]
ignore = version, help, update
.ft P
.fi
.sp
You can also enable the pager only for certain commands using
pager.attend. Below is the default list of commands to be paged:
.sp
.nf
.ft C
[pager]
attend = annotate, cat, diff, export, glog, log, qdiff
.ft P
.fi
.sp
Setting pager.attend to an empty value will cause all commands to be
paged.
.sp
If pager.attend is present, pager.ignore will be ignored.
.sp
To ignore global commands like \%\fBhg version\fP\: or \%\fBhg help\fP\:, you have
to specify them in your user configuration file.
.sp
The \-\-pager=... option can also be used to control when the pager is
used. Use a boolean value like yes, no, on, off, or use auto for
normal behavior.
.SS parentrevspec
.sp
interpret suffixes to refer to ancestor revisions
.sp
This extension allows you to use git\-style suffixes to refer to the
ancestors of a specific revision.
.sp
For example, if you can refer to a revision as "foo", then:
.sp
.nf
.ft C
foo^N = Nth parent of foo
foo^0 = foo
foo^1 = first parent of foo
foo^2 = second parent of foo
foo^  = foo^1

foo~N = Nth first grandparent of foo
foo~0 = foo
foo~1 = foo^1 = foo^ = first parent of foo
foo~2 = foo^1^1 = foo^^ = first parent of first parent of foo
.ft P
.fi
.SS patchbomb
.sp
command to send changesets as (a series of) patch emails
.sp
The series is started off with a "[PATCH 0 of N]" introduction, which
describes the series as a whole.
.sp
Each patch email has a Subject line of "[PATCH M of N] ...", using the
first line of the changeset description as the subject text. The
message contains two or three body parts:
.INDENT 0.0
.IP \(bu 2
.
The changeset description.
.IP \(bu 2
.
[Optional] The result of running diffstat on the patch.
.IP \(bu 2
.
The patch itself, as generated by \%\fBhg export\fP\:.
.UNINDENT
.sp
Each message refers to the first in the series using the In\-Reply\-To
and References headers, so they will show up as a sequence in threaded
mail and news readers, and in mail archives.
.sp
To configure other defaults, add a section like this to your hgrc
file:
.sp
.nf
.ft C
[email]
from = My Name <my@email>
to = recipient1, recipient2, ...
cc = cc1, cc2, ...
bcc = bcc1, bcc2, ...
reply\-to = address1, address2, ...
.ft P
.fi
.sp
Use \fB[patchbomb]\fP as configuration section name if you need to
override global \fB[email]\fP address settings.
.sp
Then you can use the \%\fBhg email\fP\: command to mail a series of
changesets as a patchbomb.
.sp
You can also either configure the method option in the email section
to be a sendmail compatible mailer or fill out the [smtp] section so
that the patchbomb extension can automatically send patchbombs
directly from the commandline. See the [email] and [smtp] sections in
hgrc(5) for details.
.SS Commands
.SS email
.sp
.nf
.ft C
hg email [OPTION]... [DEST]...
.ft P
.fi
.sp
By default, diffs are sent in the format generated by
\%\fBhg export\fP\:, one per message. The series starts with a "[PATCH 0
of N]" introduction, which describes the series as a whole.
.sp
Each patch email has a Subject line of "[PATCH M of N] ...", using
the first line of the changeset description as the subject text.
The message contains two or three parts. First, the changeset
description.
.sp
With the \-d/\-\-diffstat option, if the diffstat program is
installed, the result of running diffstat on the patch is inserted.
.sp
Finally, the patch itself, as generated by \%\fBhg export\fP\:.
.sp
With the \-d/\-\-diffstat or \-c/\-\-confirm options, you will be presented
with a final summary of all messages and asked for confirmation before
the messages are sent.
.sp
By default the patch is included as text in the email body for
easy reviewing. Using the \-a/\-\-attach option will instead create
an attachment for the patch. With \-i/\-\-inline an inline attachment
will be created.
.sp
With \-o/\-\-outgoing, emails will be generated for patches not found
in the destination repository (or only those which are ancestors
of the specified revisions if any are provided)
.sp
With \-b/\-\-bundle, changesets are selected as for \-\-outgoing, but a
single email containing a binary Mercurial bundle as an attachment
will be sent.
.sp
With \-m/\-\-mbox, instead of previewing each patchbomb message in a
pager or sending the messages directly, it will create a UNIX
mailbox file with the patch emails. This mailbox file can be
previewed with any mail user agent which supports UNIX mbox
files.
.sp
With \-n/\-\-test, all steps will run, but mail will not be sent.
You will be prompted for an email recipient address, a subject and
an introductory message describing the patches of your patchbomb.
Then when all is done, patchbomb messages are displayed. If the
PAGER environment variable is set, your pager will be fired up once
for each patchbomb message, so you can verify everything is alright.
.sp
In case email sending fails, you will find a backup of your series
introductory message in \fB.hg/last\-email.txt\fP.
.sp
Examples:
.sp
.nf
.ft C
hg email \-r 3000          # send patch 3000 only
hg email \-r 3000 \-r 3001  # send patches 3000 and 3001
hg email \-r 3000:3005     # send patches 3000 through 3005
hg email 3000             # send patch 3000 (deprecated)

hg email \-o               # send all patches not in default
hg email \-o DEST          # send all patches not in DEST
hg email \-o \-r 3000       # send all ancestors of 3000 not in default
hg email \-o \-r 3000 DEST  # send all ancestors of 3000 not in DEST

hg email \-b               # send bundle of all patches not in default
hg email \-b DEST          # send bundle of all patches not in DEST
hg email \-b \-r 3000       # bundle of all ancestors of 3000 not in default
hg email \-b \-r 3000 DEST  # bundle of all ancestors of 3000 not in DEST

hg email \-o \-m mbox &&    # generate an mbox file...
  mutt \-R \-f mbox         # ... and view it with mutt
hg email \-o \-m mbox &&    # generate an mbox file ...
  formail \-s sendmail \e   # ... and use formail to send from the mbox
    \-bm \-t < mbox         # ... using sendmail
.ft P
.fi
.sp
Before using this command, you will need to enable email in your
hgrc. See the [email] section in hgrc(5) for details.
.sp
Options:
.INDENT 0.0
.TP
.B \-g,  \-\-git
.
use git extended diff format
.TP
.B \-\-plain
.
omit hg patch header
.TP
.B \-o,  \-\-outgoing
.
send changes not found in the target repository
.TP
.B \-b,  \-\-bundle
.
send changes not in target as a binary bundle
.TP
.B \-\-bundlename
.
name of the bundle attachment file (default: bundle)
.TP
.B \-r,  \-\-rev
.
a revision to send
.TP
.B \-\-force
.
run even when remote repository is unrelated (with \-b/\-\-bundle)
.TP
.B \-\-base
.
a base changeset to specify instead of a destination (with \-b/\-\-bundle)
.TP
.B \-\-intro
.
send an introduction email for a single patch
.TP
.B \-a,  \-\-attach
.
send patches as attachments
.TP
.B \-i,  \-\-inline
.
send patches as inline attachments
.TP
.B \-\-bcc
.
email addresses of blind carbon copy recipients
.TP
.B \-c,  \-\-cc
.
email addresses of copy recipients
.TP
.B \-\-confirm
.
ask for confirmation before sending
.TP
.B \-d,  \-\-diffstat
.
add diffstat output to messages
.TP
.B \-\-date
.
use the given date as the sending date
.TP
.B \-\-desc
.
use the given file as the series description
.TP
.B \-f,  \-\-from
.
email address of sender
.TP
.B \-n,  \-\-test
.
print messages that would be sent
.TP
.B \-m,  \-\-mbox
.
write messages to mbox file instead of sending them
.TP
.B \-\-reply\-to
.
email addresses replies should be sent to
.TP
.B \-s,  \-\-subject
.
subject of first message (intro or single patch)
.TP
.B \-\-in\-reply\-to
.
message identifier to reply to
.TP
.B \-\-flag
.
flags to add in subject prefixes
.TP
.B \-t,  \-\-to
.
email addresses of recipients
.TP
.B \-e,  \-\-ssh
.
specify ssh command to use
.TP
.B \-\-remotecmd
.
specify hg command to run on the remote side
.TP
.B \-\-insecure
.
do not verify server certificate (ignoring web.cacerts config)
.UNINDENT
.SS progress
.sp
show progress bars for some actions
.sp
This extension uses the progress information logged by hg commands
to draw progress bars that are as informative as possible. Some progress
bars only offer indeterminate information, while others have a definite
end point.
.sp
The following settings are available:
.sp
.nf
.ft C
[progress]
delay = 3 # number of seconds (float) before showing the progress bar
refresh = 0.1 # time in seconds between refreshes of the progress bar
format = topic bar number estimate # format of the progress bar
width = <none> # if set, the maximum width of the progress information
               # (that is, min(width, term width) will be used)
clear\-complete = True # clear the progress bar after it\(aqs done
disable = False # if true, don\(aqt show a progress bar
assume\-tty = False # if true, ALWAYS show a progress bar, unless
                   # disable is given
.ft P
.fi
.sp
Valid entries for the format field are topic, bar, number, unit,
estimate, and item. item defaults to the last 20 characters of the
item, but this can be changed by adding either \fB\-<num>\fP which would
take the last num characters, or \fB+<num>\fP for the first num
characters.
.SS purge
.sp
command to delete untracked files from the working directory
.SS Commands
.SS purge
.sp
.nf
.ft C
hg purge [OPTION]... [DIR]...
.ft P
.fi
.sp
Delete files not known to Mercurial. This is useful to test local
and uncommitted changes in an otherwise\-clean source tree.
.sp
This means that purge will delete:
.INDENT 0.0
.IP \(bu 2
.
Unknown files: files marked with "?" by \%\fBhg status\fP\:
.IP \(bu 2
.
Empty directories: in fact Mercurial ignores directories unless
they contain files under source control management
.UNINDENT
.sp
But it will leave untouched:
.INDENT 0.0
.IP \(bu 2
.
Modified and unmodified tracked files
.IP \(bu 2
.
Ignored files (unless \-\-all is specified)
.IP \(bu 2
.
New files added to the repository (with \%\fBhg add\fP\:)
.UNINDENT
.sp
If directories are given on the command line, only files in these
directories are considered.
.sp
Be careful with purge, as you could irreversibly delete some files
you forgot to add to the repository. If you only want to print the
list of files that this program would delete, use the \-\-print
option.
.sp
Options:
.INDENT 0.0
.TP
.B \-a,  \-\-abort\-on\-err
.
abort if an error occurs
.TP
.B \-\-all
.
purge ignored files too
.TP
.B \-p,  \-\-print
.
print filenames instead of deleting them
.TP
.B \-0,  \-\-print0
.
end filenames with NUL, for use with xargs (implies \-p/\-\-print)
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.sp
aliases: clean
.UNINDENT
.SS rebase
.sp
command to move sets of revisions to a different ancestor
.sp
This extension lets you rebase changesets in an existing Mercurial
repository.
.sp
For more information:
\%http://mercurial.selenic.com/wiki/RebaseExtension\:
.SS Commands
.SS rebase
.sp
.nf
.ft C
hg rebase [\-s REV | \-b REV] [\-d REV] [options]
hg rebase {\-a|\-c}
.ft P
.fi
.sp
Rebase uses repeated merging to graft changesets from one part of
history (the source) onto another (the destination). This can be
useful for linearizing \fIlocal\fP changes relative to a master
development tree.
.sp
You should not rebase changesets that have already been shared
with others. Doing so will force everybody else to perform the
same rebase or they will end up with duplicated changesets after
pulling in your rebased changesets.
.sp
If you don\(aqt specify a destination changeset (\fB\-d/\-\-dest\fP),
rebase uses the tipmost head of the current named branch as the
destination. (The destination changeset is not modified by
rebasing, but new changesets are added as its descendants.)
.sp
You can specify which changesets to rebase in two ways: as a
"source" changeset or as a "base" changeset. Both are shorthand
for a topologically related set of changesets (the "source
branch"). If you specify source (\fB\-s/\-\-source\fP), rebase will
rebase that changeset and all of its descendants onto dest. If you
specify base (\fB\-b/\-\-base\fP), rebase will select ancestors of base
back to but not including the common ancestor with dest. Thus,
\fB\-b\fP is less precise but more convenient than \fB\-s\fP: you can
specify any changeset in the source branch, and rebase will select
the whole branch. If you specify neither \fB\-s\fP nor \fB\-b\fP, rebase
uses the parent of the working directory as the base.
.sp
By default, rebase recreates the changesets in the source branch
as descendants of dest and then destroys the originals. Use
\fB\-\-keep\fP to preserve the original source changesets. Some
changesets in the source branch (e.g. merges from the destination
branch) may be dropped if they no longer contribute any change.
.sp
One result of the rules for selecting the destination changeset
and source branch is that, unlike \fBmerge\fP, rebase will do
nothing if you are at the latest (tipmost) head of a named branch
with two heads. You need to explicitly specify source and/or
destination (or \fBupdate\fP to the other head, if it\(aqs the head of
the intended source branch).
.sp
If a rebase is interrupted to manually resolve a merge, it can be
continued with \-\-continue/\-c or aborted with \-\-abort/\-a.
.sp
Returns 0 on success, 1 if nothing to rebase.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-source
.
rebase from the specified changeset
.TP
.B \-b,  \-\-base
.
rebase from the base of the specified changeset (up to greatest common ancestor of base and dest)
.TP
.B \-d,  \-\-dest
.
rebase onto the specified changeset
.TP
.B \-\-collapse
.
collapse the rebased changesets
.TP
.B \-\-keep
.
keep original changesets
.TP
.B \-\-keepbranches
.
keep original branch names
.TP
.B \-\-detach
.
force detaching of source from its original branch
.TP
.B \-c,  \-\-continue
.
continue an interrupted rebase
.TP
.B \-a,  \-\-abort
.
abort an interrupted rebase
.TP
.B \-\-style
.
display using template map file
.TP
.B \-\-template
.
display with template
.UNINDENT
.SS record
.sp
commands to interactively select changes for commit/qrefresh
.SS Commands
.SS record
.sp
.nf
.ft C
hg record [OPTION]... [FILE]...
.ft P
.fi
.sp
If a list of files is omitted, all changes reported by \%\fBhg status\fP\:
will be candidates for recording.
.sp
See \%\fBhg help dates\fP\: for a list of formats valid for \-d/\-\-date.
.sp
You will be prompted for whether to record changes to each
modified file, and for files with multiple changes, for each
change to use. For each query, the following responses are
possible:
.sp
.nf
.ft C
y \- record this change
n \- skip this change

s \- skip remaining changes to this file
f \- record remaining changes to this file

d \- done, skip remaining changes and files
a \- record all changes to all remaining files
q \- quit, recording no changes

? \- display help
.ft P
.fi
.sp
This command is not available when committing a merge.
.sp
Options:
.INDENT 0.0
.TP
.B \-A,  \-\-addremove
.
mark new/missing files as added/removed before committing
.TP
.B \-\-close\-branch
.
mark a branch as closed, hiding it from the branch list
.TP
.B \-I,  \-\-include
.
include names matching the given patterns
.TP
.B \-X,  \-\-exclude
.
exclude names matching the given patterns
.TP
.B \-m,  \-\-message
.
use text as commit message
.TP
.B \-l,  \-\-logfile
.
read commit message from file
.TP
.B \-d,  \-\-date
.
record datecode as commit date
.TP
.B \-u,  \-\-user
.
record the specified user as committer
.UNINDENT
.SS relink
.sp
recreates hardlinks between repository clones
.SS Commands
.SS relink
.sp
.nf
.ft C
hg relink [ORIGIN]
.ft P
.fi
.sp
When repositories are cloned locally, their data files will be
hardlinked so that they only use the space of a single repository.
.sp
Unfortunately, subsequent pulls into either repository will break
hardlinks for any files touched by the new changesets, even if
both repositories end up pulling the same changes.
.sp
Similarly, passing \-\-rev to "hg clone" will fail to use any
hardlinks, falling back to a complete copy of the source
repository.
.sp
This command lets you recreate those hardlinks and reclaim that
wasted space.
.sp
This repository will be relinked to share space with ORIGIN, which
must be on the same local disk. If ORIGIN is omitted, looks for
"default\-relink", then "default", in [paths].
.sp
Do not attempt any read operations on this repository while the
command is running. (Both repositories will be locked against
writes.)
.SS schemes
.sp
extend schemes with shortcuts to repository swarms
.sp
This extension allows you to specify shortcuts for parent URLs with a
lot of repositories to act like a scheme, for example:
.sp
.nf
.ft C
[schemes]
py = http://code.python.org/hg/
.ft P
.fi
.sp
After that you can use it like:
.sp
.nf
.ft C
hg clone py://trunk/
.ft P
.fi
.sp
Additionally there is support for some more complex schemas, for
example used by Google Code:
.sp
.nf
.ft C
[schemes]
gcode = http://{1}.googlecode.com/hg/
.ft P
.fi
.sp
The syntax is taken from Mercurial templates, and you have unlimited
number of variables, starting with \fB{1}\fP and continuing with
\fB{2}\fP, \fB{3}\fP and so on. This variables will receive parts of URL
supplied, split by \fB/\fP. Anything not specified as \fB{part}\fP will be
just appended to an URL.
.sp
For convenience, the extension adds these schemes by default:
.sp
.nf
.ft C
[schemes]
py = http://hg.python.org/
bb = https://bitbucket.org/
bb+ssh = ssh://hg@bitbucket.org/
gcode = https://{1}.googlecode.com/hg/
kiln = https://{1}.kilnhg.com/Repo/
.ft P
.fi
.sp
You can override a predefined scheme by defining a new scheme with the
same name.
.SS share
.sp
share a common history between several working directories
.SS Commands
.SS share
.sp
.nf
.ft C
hg share [\-U] SOURCE [DEST]
.ft P
.fi
.sp
Initialize a new repository and working directory that shares its
history with another repository.
.IP Note
.
using rollback or extensions that destroy/modify history (mq,
rebase, etc.) can cause considerable confusion with shared
clones. In particular, if two shared clones are both updated to
the same changeset, and one of them destroys that changeset
with rollback, the other clone will suddenly stop working: all
operations will fail with "abort: working directory has unknown
parent". The only known workaround is to use debugsetparents on
the broken clone to reset it to a changeset that still exists
(e.g. tip).
.RE
.sp
Options:
.INDENT 0.0
.TP
.B \-U,  \-\-noupdate
.
do not create a working copy
.UNINDENT
.SS transplant
.sp
command to transplant changesets from another branch
.sp
This extension allows you to transplant patches from another branch.
.sp
Transplanted patches are recorded in .hg/transplant/transplants, as a
map from a changeset hash to its hash in the source repository.
.SS Commands
.SS transplant
.sp
.nf
.ft C
hg transplant [\-s REPO] [\-b BRANCH [\-a]] [\-p REV] [\-m REV] [REV]...
.ft P
.fi
.sp
Selected changesets will be applied on top of the current working
directory with the log of the original changeset. If \-\-log is
specified, log messages will have a comment appended of the form:
.sp
.nf
.ft C
(transplanted from CHANGESETHASH)
.ft P
.fi
.sp
You can rewrite the changelog message with the \-\-filter option.
Its argument will be invoked with the current changelog message as
$1 and the patch as $2.
.sp
If \-\-source/\-s is specified, selects changesets from the named
repository. If \-\-branch/\-b is specified, selects changesets from
the branch holding the named revision, up to that revision. If
\-\-all/\-a is specified, all changesets on the branch will be
transplanted, otherwise you will be prompted to select the
changesets you want.
.sp
\%\fBhg transplant \-\-branch REVISION \-\-all\fP\: will rebase the selected
branch (up to the named revision) onto your current working
directory.
.sp
You can optionally mark selected transplanted changesets as merge
changesets. You will not be prompted to transplant any ancestors
of a merged transplant, and you can merge descendants of them
normally instead of transplanting them.
.sp
If no merges or revisions are provided, \%\fBhg transplant\fP\: will
start an interactive changeset browser.
.sp
If a changeset application fails, you can fix the merge by hand
and then resume where you left off by calling \%\fBhg transplant
\-\-continue/\-c\fP\:.
.sp
Options:
.INDENT 0.0
.TP
.B \-s,  \-\-source
.
pull patches from REPO
.TP
.B \-b,  \-\-branch
.
pull patches from branch BRANCH
.TP
.B \-a,  \-\-all
.
pull all changesets up to BRANCH
.TP
.B \-p,  \-\-prune
.
skip over REV
.TP
.B \-m,  \-\-merge
.
merge at REV
.TP
.B \-\-log
.
append transplant info to log message
.TP
.B \-c,  \-\-continue
.
continue last transplant session after repair
.TP
.B \-\-filter
.
filter changesets through command
.UNINDENT
.SS win32mbcs
.sp
allow the use of MBCS paths with problematic encodings
.sp
Some MBCS encodings are not good for some path operations (i.e.
splitting path, case conversion, etc.) with its encoded bytes. We call
such a encoding (i.e. shift_jis and big5) as "problematic encoding".
This extension can be used to fix the issue with those encodings by
wrapping some functions to convert to Unicode string before path
operation.
.sp
This extension is useful for:
.INDENT 0.0
.IP \(bu 2
.
Japanese Windows users using shift_jis encoding.
.IP \(bu 2
.
Chinese Windows users using big5 encoding.
.IP \(bu 2
.
All users who use a repository with one of problematic encodings on
case\-insensitive file system.
.UNINDENT
.sp
This extension is not needed for:
.INDENT 0.0
.IP \(bu 2
.
Any user who use only ASCII chars in path.
.IP \(bu 2
.
Any user who do not use any of problematic encodings.
.UNINDENT
.sp
Note that there are some limitations on using this extension:
.INDENT 0.0
.IP \(bu 2
.
You should use single encoding in one repository.
.IP \(bu 2
.
If the repository path ends with 0x5c, .hg/hgrc cannot be read.
.IP \(bu 2
.
win32mbcs is not compatible with fixutf8 extension.
.UNINDENT
.sp
By default, win32mbcs uses encoding.encoding decided by Mercurial.
You can specify the encoding by config option:
.sp
.nf
.ft C
[win32mbcs]
encoding = sjis
.ft P
.fi
.sp
It is useful for the users who want to commit with UTF\-8 log message.
.SS win32text
.sp
perform automatic newline conversion
.INDENT 0.0
.INDENT 3.5
.sp
Deprecation: The win32text extension requires each user to configure
the extension again and again for each clone since the configuration
is not copied when cloning.
.sp
We have therefore made the \fBeol\fP as an alternative. The \fBeol\fP
uses a version controlled file for its configuration and each clone
will therefore use the right settings from the start.
.UNINDENT
.UNINDENT
.sp
To perform automatic newline conversion, use:
.sp
.nf
.ft C
[extensions]
win32text =
[encode]
** = cleverencode:
# or ** = macencode:

[decode]
** = cleverdecode:
# or ** = macdecode:
.ft P
.fi
.sp
If not doing conversion, to make sure you do not commit CRLF/CR by accident:
.sp
.nf
.ft C
[hooks]
pretxncommit.crlf = python:hgext.win32text.forbidcrlf
# or pretxncommit.cr = python:hgext.win32text.forbidcr
.ft P
.fi
.sp
To do the same check on a server to prevent CRLF/CR from being
pushed or pulled:
.sp
.nf
.ft C
[hooks]
pretxnchangegroup.crlf = python:hgext.win32text.forbidcrlf
# or pretxnchangegroup.cr = python:hgext.win32text.forbidcr
.ft P
.fi
.SS zeroconf
.sp
discover and advertise repositories on the local network
.sp
Zeroconf\-enabled repositories will be announced in a network without
the need to configure a server or a service. They can be discovered
without knowing their actual IP address.
.sp
To allow other people to discover your repository using run
\%\fBhg serve\fP\: in your repository:
.sp
.nf
.ft C
$ cd test
$ hg serve
.ft P
.fi
.sp
You can discover Zeroconf\-enabled repositories by running
\%\fBhg paths\fP\::
.sp
.nf
.ft C
$ hg paths
zc\-test = http://example.com:8000/test
.ft P
.fi
.SH FILES
.INDENT 0.0
.TP
.B \fB.hgignore\fP
.sp
This file contains regular expressions (one per line) that
describe file names that should be ignored by \fBhg\fP. For details,
see \%\fBhgignore\fP(5)\:.
.TP
.B \fB.hgtags\fP
.sp
This file contains changeset hash values and text tag names (one
of each separated by spaces) that correspond to tagged versions of
the repository contents.
.TP
.B \fB/etc/mercurial/hgrc\fP, \fB$HOME/.hgrc\fP, \fB.hg/hgrc\fP
.sp
This file contains defaults and configuration. Values in
\fB.hg/hgrc\fP override those in \fB$HOME/.hgrc\fP, and these override
settings made in the global \fB/etc/mercurial/hgrc\fP configuration.
See \%\fBhgrc\fP(5)\: for details of the contents and format of these
files.
.UNINDENT
.sp
Some commands (e.g. revert) produce backup files ending in \fB.orig\fP,
if the \fB.orig\fP file already exists and is not tracked by Mercurial,
it will be overwritten.
.SH BUGS
.sp
Probably lots, please post them to the mailing list (see \%Resources\:
below) when you find them.
.SH SEE ALSO
.sp
\%\fBhgignore\fP(5)\:, \%\fBhgrc\fP(5)\:
.SH AUTHOR
.sp
Written by Matt Mackall <\%mpm@selenic.com\:>
.SH RESOURCES
.sp
Main Web Site: \%http://mercurial.selenic.com/\:
.sp
Source code repository: \%http://selenic.com/hg\:
.sp
Mailing list: \%http://selenic.com/mailman/listinfo/mercurial\:
.SH COPYING
.sp
Copyright (C) 2005\-2010 Matt Mackall.
Free use of this software is granted under the terms of the GNU General
Public License version 2 or any later version.
.\" Common link and substitution definitions.
.
.SH AUTHOR
Matt Mackall <mpm@selenic.com>

Organization: Mercurial
.\" Generated by docutils manpage writer.
.\" 
.
